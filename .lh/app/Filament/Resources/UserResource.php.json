{
    "sourceFile": "app/Filament/Resources/UserResource.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1731263702603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1732170818498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n use App\\Filament\\Resources\\UserResource\\RelationManagers\\OrdersRelationManager;\n use App\\Models\\User;\n use Filament\\Forms;\n use Filament\\Forms\\Components\\Hidden;\n+use Filament\\Forms\\Components\\Select;\n use Filament\\Forms\\Components\\TextInput;\n use Filament\\Forms\\Components\\Toggle;\n use Filament\\Forms\\Form;\n use Filament\\Forms\\Get;\n@@ -70,9 +71,9 @@\n                 Forms\\Components\\DateTimePicker::make('created_at')\n                     ->label('Created At')\n                     ->readOnly(),\n \n-                Forms\\Components\\Select::make('branch_id')\n+                Select::make('branch_id')\n                     ->relationship('branch', 'name')\n                     ->label('Branch')\n                     ->hidden(function () {\n                         if (Auth::user()->id == 1 || Auth::user()->id == 2 && Auth::user()->is_admin != 0) {\n"
                },
                {
                    "date": 1733760993403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,8 +116,59 @@\n                             return true;\n                         }\n                     })\n                     ->default(false),\n+\n+                    TextInput::make('phone')\n+                    ->required()\n+                    ->tel()\n+                    ->maxLength(20),\n+\n+                TextInput::make('zip_code')\n+                    ->numeric()\n+                    ->maxLength(10),\n+\n+                Select::make('state')\n+                    ->options(Province::query()->pluck('name', 'code'))\n+                    ->searchable()\n+                    ->required()\n+                    ->live()\n+                    ->afterStateUpdated(function (Set $set) {\n+                        $set('city', null);\n+                    }),\n+\n+                Select::make('city')\n+                    ->options(function (Get $get): Collection {\n+                        return City::query()->where('province_code', $get('state'))->pluck('name', 'code');\n+                    })\n+                    ->searchable()\n+                    ->required()\n+                    ->live()\n+                    ->afterStateUpdated(function (Set $set) {\n+                        $set('district', null);\n+                    }),\n+\n+                Select::make('district')\n+                    ->options(function (Get $get): Collection {\n+                        return District::query()->where('city_code', $get('city'))->pluck('name', 'code');\n+                    })\n+                    ->searchable()\n+                    ->required()\n+                    ->live()\n+                    ->afterStateUpdated(function (Set $set) {\n+                        $set('village', null);\n+                    }),\n+\n+                Select::make('village')\n+                    ->options(function (Get $get): Collection {\n+                        return Village::query()->where('district_code', $get('district'))->pluck('name', 'code');\n+                    })\n+                    ->searchable()\n+                    ->required(),\n+\n+                Textarea::make('street_address')\n+                    ->required()\n+                    ->columnSpanFull(),\n             ]);\n     }\n \n     public static function table(Table $table): Table\n"
                },
                {
                    "date": 1733761034598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n use App\\Models\\User;\n use Filament\\Forms;\n use Filament\\Forms\\Components\\Hidden;\n use Filament\\Forms\\Components\\Select;\n+use Filament\\Forms\\Components\\Textarea;\n use Filament\\Forms\\Components\\TextInput;\n use Filament\\Forms\\Components\\Toggle;\n use Filament\\Forms\\Form;\n use Filament\\Forms\\Get;\n@@ -28,8 +29,12 @@\n use Illuminate\\Database\\Eloquent\\SoftDeletingScope;\n use Illuminate\\Support\\Facades\\Auth;\n use PhpParser\\Node\\Expr\\BinaryOp\\BooleanOr;\n use PhpParser\\Node\\Expr\\Cast\\Bool_;\n+use Vermaysha\\Wilayah\\Models\\City;\n+use Vermaysha\\Wilayah\\Models\\District;\n+use Vermaysha\\Wilayah\\Models\\Province;\n+use Vermaysha\\Wilayah\\Models\\Village;\n \n class UserResource extends Resource\n {\n     protected static ?string $model = User::class;\n"
                },
                {
                    "date": 1733761089665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,9 @@\n                         }\n                     })\n                     ->default(false),\n \n-                    TextInput::make('phone')\n+                TextInput::make('phone')\n                     ->required()\n                     ->tel()\n                     ->maxLength(20),\n \n"
                },
                {
                    "date": 1733761267232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,40 +140,9 @@\n                     ->afterStateUpdated(function (Set $set) {\n                         $set('city', null);\n                     }),\n \n-                Select::make('city')\n-                    ->options(function (Get $get): Collection {\n-                        return City::query()->where('province_code', $get('state'))->pluck('name', 'code');\n-                    })\n-                    ->searchable()\n-                    ->required()\n-                    ->live()\n-                    ->afterStateUpdated(function (Set $set) {\n-                        $set('district', null);\n-                    }),\n-\n-                Select::make('district')\n-                    ->options(function (Get $get): Collection {\n-                        return District::query()->where('city_code', $get('city'))->pluck('name', 'code');\n-                    })\n-                    ->searchable()\n-                    ->required()\n-                    ->live()\n-                    ->afterStateUpdated(function (Set $set) {\n-                        $set('village', null);\n-                    }),\n-\n-                Select::make('village')\n-                    ->options(function (Get $get): Collection {\n-                        return Village::query()->where('district_code', $get('district'))->pluck('name', 'code');\n-                    })\n-                    ->searchable()\n-                    ->required(),\n-\n-                Textarea::make('street_address')\n-                    ->required()\n-                    ->columnSpanFull(),\n+                \n             ]);\n     }\n \n     public static function table(Table $table): Table\n"
                },
                {
                    "date": 1733761333873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,40 @@\n                     ->afterStateUpdated(function (Set $set) {\n                         $set('city', null);\n                     }),\n \n+                Select::make('city')\n+                    ->options(function (Get $get): Collection {\n+                        return City::query()->where('province_code', $get('state'))->pluck('name', 'code');\n+                    })\n+                    ->searchable()\n+                    ->required()\n+                    ->live()\n+                    ->afterStateUpdated(function (Set $set) {\n+                        $set('district', null);\n+                    }),\n \n+                Select::make('district')\n+                    ->options(function (Get $get): Collection {\n+                        return District::query()->where('city_code', $get('city'))->pluck('name', 'code');\n+                    })\n+                    ->searchable()\n+                    ->required()\n+                    ->live()\n+                    ->afterStateUpdated(function (Set $set) {\n+                        $set('village', null);\n+                    }),\n+\n+                Select::make('village')\n+                    ->options(function (Get $get): Collection {\n+                        return Village::query()->where('district_code', $get('district'))->pluck('name', 'code');\n+                    })\n+                    ->searchable()\n+                    ->required(),\n+\n+                Textarea::make('street_address')\n+                    ->required()\n+                    ->columnSpanFull(),\n             ]);\n     }\n \n     public static function table(Table $table): Table\n"
                },
                {
                    "date": 1733761359722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,9 @@\n                     }),\n \n                 Select::make('city')\n                     ->options(function (Get $get): Collection {\n-                        return City::query()->where('province_code', $get('state'))->pluck('name', 'code');\n+                         City::query()->where('province_code', $get('state'))->pluck('name', 'code');\n                     })\n                     ->searchable()\n                     ->required()\n                     ->live()\n@@ -153,9 +153,9 @@\n                     }),\n \n                 Select::make('district')\n                     ->options(function (Get $get): Collection {\n-                        return District::query()->where('city_code', $get('city'))->pluck('name', 'code');\n+                         District::query()->where('city_code', $get('city'))->pluck('name', 'code');\n                     })\n                     ->searchable()\n                     ->required()\n                     ->live()\n@@ -164,9 +164,9 @@\n                     }),\n \n                 Select::make('village')\n                     ->options(function (Get $get): Collection {\n-                        return Village::query()->where('district_code', $get('district'))->pluck('name', 'code');\n+                         Village::query()->where('district_code', $get('district'))->pluck('name', 'code');\n                     })\n                     ->searchable()\n                     ->required(),\n \n"
                }
            ],
            "date": 1731263702603,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Filament\\Resources;\n\nuse App\\Filament\\Resources\\UserResource\\Pages;\nuse App\\Filament\\Resources\\UserResource\\RelationManagers;\nuse App\\Filament\\Resources\\UserResource\\RelationManagers\\OrdersRelationManager;\nuse App\\Models\\User;\nuse Filament\\Forms;\nuse Filament\\Forms\\Components\\Hidden;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Forms\\Components\\Toggle;\nuse Filament\\Forms\\Form;\nuse Filament\\Forms\\Get;\nuse Filament\\Forms\\Set;\nuse Filament\\Pages\\Page;\nuse Filament\\Resources\\Pages\\CreateRecord;\nuse Filament\\Resources\\Pages\\Page as PagesPage;\nuse Filament\\Resources\\Resource;\nuse Filament\\Tables;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Tables\\Columns\\ToggleColumn;\nuse Filament\\Tables\\Table;\nuse Hamcrest\\Type\\IsBoolean;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Database\\Eloquent\\Collection;\nuse Illuminate\\Database\\Eloquent\\SoftDeletingScope;\nuse Illuminate\\Support\\Facades\\Auth;\nuse PhpParser\\Node\\Expr\\BinaryOp\\BooleanOr;\nuse PhpParser\\Node\\Expr\\Cast\\Bool_;\n\nclass UserResource extends Resource\n{\n    protected static ?string $model = User::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-user-group';\n    protected static ?string $navigationGroup = 'User';\n    protected static ?int $navigationSort = 19;\n    protected static ?string $recordTitleAttribute = 'name';\n\n    public static function form(Form $form): Form\n    {\n        return $form\n            ->schema([\n\n                Hidden::make('created_oleh')\n                    ->default(fn() => Auth::user()->id) ## keperluan untuk memilih user setelah ada auth\n                    // ->disabledOn('edit')\n                    ->required(),\n\n                Hidden::make('updated_oleh')\n                    ->default(fn() => Auth::user()->id) ## keperluan untuk memilih user setelah ada auth\n                    ->required(),\n\n                Forms\\Components\\TextInput::make('name')\n                    ->required(),\n                Forms\\Components\\TextInput::make('email')\n                    ->label('Email Address')\n                    ->email()\n                    ->maxlength(255)\n                    ->unique(ignoreRecord: true)\n                    ->required(),\n                Forms\\Components\\DateTimePicker::make('email_verified_at')\n                    ->label('Email Verified At')\n                    ->default(now()),\n                Forms\\Components\\TextInput::make('password')\n                    ->password()\n                    ->dehydrated(fn($state) => filled($state))\n                    ->required(fn(Page $livewire): bool => $livewire instanceof CreateRecord),\n                Forms\\Components\\DateTimePicker::make('created_at')\n                    ->label('Created At')\n                    ->readOnly(),\n\n                Forms\\Components\\Select::make('branch_id')\n                    ->relationship('branch', 'name')\n                    ->label('Branch')\n                    ->hidden(function () {\n                        if (Auth::user()->id == 1 || Auth::user()->id == 2 && Auth::user()->is_admin != 0) {\n                            return false;\n                        } else {\n                            return true;\n                        }\n                    })\n                    ->searchable()\n                    ->preload(),\n\n                Forms\\Components\\Select::make('roles')\n                    ->relationship('roles', 'name', modifyQueryUsing: fn(Builder $query) => $query->where('name', '!=', 'super_admin'))\n                    ->live(onBlur: true)\n                    ->afterStateUpdated(function (Get $get, Set $set) {\n                        if ($get('roles') == null) {\n                            $set('is_admin', false);\n                        } else {\n                            $set('is_admin', true);\n                        }\n                    })\n                    // ->disableOptionWhen(fn(string $value): bool => $value == 1)\n                    ->hidden(function () {\n                        if (Auth::user()->id == 1 || Auth::user()->id == 2 && Auth::user()->is_admin != 0) {\n                            return false;\n                        } else {\n                            return true;\n                        }\n                    })\n                    ->label('Role'),\n\n                Toggle::make('is_admin')\n                    ->disabled()\n                    ->dehydrated()\n                    ->required()\n                    ->hidden(function () {\n                        if (Auth::user()->id == 1 || Auth::user()->id == 2 && Auth::user()->is_admin != 0) {\n                            return false;\n                        } else {\n                            return true;\n                        }\n                    })\n                    ->default(false),\n            ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            // ->modifyQueryUsing(function (Builder $query) {\n            //     return $query->addSelect([\n            //         'created' => User::query()->select('name')\n            //             ->whereColumn('id', 'created_oleh'),\n            //         'updated' => User::query()->select('name')\n            //             ->whereColumn('id', 'updated_oleh'),\n            //     ]);\n            // })\n            ->columns([\n                ToggleColumn::make('is_admin')\n                    ->hidden(function () {\n                        if (Auth::user()->email == 'mangunwirayuda@gmail.com') {\n                            return false;\n                        } else {\n                            return true;\n                        }\n                    })\n                    ->label('Admin?')\n                    ->sortable(),\n                Tables\\Columns\\TextColumn::make('name')\n                    ->searchable(),\n                Tables\\Columns\\TextColumn::make('email')\n                    ->icon('heroicon-m-envelope')\n                    ->iconColor('primary')\n                    ->searchable(),\n                Tables\\Columns\\TextColumn::make('roles.name')\n                    ->sortable()\n                    ->searchable(),\n                Tables\\Columns\\TextColumn::make('branch.name')\n                    ->sortable()\n                    ->searchable(),\n                Tables\\Columns\\TextColumn::make('email_verified_at')\n                    ->dateTime()\n                    ->sortable()\n                    ->toggleable(isToggledHiddenByDefault: true),\n                Tables\\Columns\\TextColumn::make('created_at')\n                    ->dateTime()\n                    ->sortable()\n                    ->toggleable(isToggledHiddenByDefault: true),\n                Tables\\Columns\\TextColumn::make('updated_at')\n                    ->dateTime()\n                    ->sortable()\n                    ->toggleable(isToggledHiddenByDefault: true),\n\n                TextColumn::make('created_oleh')\n                    ->label('Created by')\n                    ->sortable()\n                    ->toggleable(isToggledHiddenByDefault: true),\n\n                TextColumn::make('updated_oleh')\n                    ->label('Updated by')\n                    ->sortable()\n                    ->toggleable(isToggledHiddenByDefault: true),\n            ])->defaultSort('created_at', 'desc')\n            ->filters([\n                //\n            ])\n            ->actions([\n                Tables\\Actions\\ActionGroup::make([\n                    Tables\\Actions\\ViewAction::make(),\n                    Tables\\Actions\\EditAction::make(),\n                    Tables\\Actions\\DeleteAction::make(),\n                ])\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\BulkAction::make(name: 'Admin?')\n                        ->requiresConfirmation()\n                        ->color('info')\n                        ->icon('heroicon-o-shield-check')\n                        ->action(function (Collection $records, array $data): void {\n                            foreach ($records as $record) {\n                                $record->is_admin = $data['is_admin'];\n                                $record->save();\n                            }\n                        })\n                        ->form([\n                            Toggle::make('is_admin')\n                                ->label('Admin?')\n                                ->required(),\n                        ]),\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->query(function (User $query) {\n                if (Auth::user()->id == 1 || Auth::user()->id == 2) {\n                    return $query->where('email', '!=', 'mangunwirayuda@gmail.com')->where('id', '!=', 1);\n                } else {\n                    return $query->where('email', '!=', 'mangunwirayuda@gmail.com')->where('is_admin', 0);\n                }\n            });\n    }\n\n    public static function getRelations(): array\n    {\n        return [\n            OrdersRelationManager::class\n        ];\n    }\n\n    public static function getGloballySearchableAttributes(): array\n    {\n        return ['name', 'email'];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListUsers::route('/'),\n            'create' => Pages\\CreateUser::route('/create'),\n            'edit' => Pages\\EditUser::route('/{record}/edit'),\n        ];\n    }\n}\n"
        }
    ]
}