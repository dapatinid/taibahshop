{
    "sourceFile": "app/Filament/Resources/ProductResource.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1731220896610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1732727970053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -313,9 +313,9 @@\n                 IconColumn::make('on_sale')\n                     ->sortable()\n                     ->boolean(),\n \n-                TextColumn::make('pquantities_sum_p_quantity')->sum('pquantities', 'p_quantity')\n+                TextColumn::make('pquantities_sum_p_quantity')->leftJoin('orders', 'order_items.id', '=', 'orders.id')->get()->where('order.status', '!=', 'canceled')->sum('pquantities', 'p_quantity')\n                     ->label('B.Qty')\n                     ->formatStateUsing(fn(string $state): string => $state * 1)\n                     ->summarize(Sum::make()->formatStateUsing(fn(string $state): string => $state * 1)),\n \n"
                },
                {
                    "date": 1732727987190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -313,14 +313,14 @@\n                 IconColumn::make('on_sale')\n                     ->sortable()\n                     ->boolean(),\n \n-                TextColumn::make('pquantities_sum_p_quantity')->leftJoin('orders', 'order_items.id', '=', 'orders.id')->get()->where('order.status', '!=', 'canceled')->sum('pquantities', 'p_quantity')\n+                TextColumn::make('pquantities_sum_p_quantity')->sum('pquantities', 'p_quantity')\n                     ->label('B.Qty')\n                     ->formatStateUsing(fn(string $state): string => $state * 1)\n                     ->summarize(Sum::make()->formatStateUsing(fn(string $state): string => $state * 1)),\n \n-                TextColumn::make('quantities_sum_quantity')->sum('quantities', 'quantity')\n+                TextColumn::make('quantities_sum_quantity')->leftJoin('orders', 'order_items.id', '=', 'orders.id')->get()->where('order.status', '!=', 'canceled')->sum('quantities', 'quantity')\n                     ->label('S.Qty')\n                     ->formatStateUsing(fn(string $state): string => $state * -1)\n                     ->summarize(Sum::make()->formatStateUsing(fn(string $state): string => $state * -1)),\n \n"
                },
                {
                    "date": 1732728005587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -318,9 +318,9 @@\n                     ->label('B.Qty')\n                     ->formatStateUsing(fn(string $state): string => $state * 1)\n                     ->summarize(Sum::make()->formatStateUsing(fn(string $state): string => $state * 1)),\n \n-                TextColumn::make('quantities_sum_quantity')->leftJoin('orders', 'order_items.id', '=', 'orders.id')->get()->where('order.status', '!=', 'canceled')->sum('quantities', 'quantity')\n+                TextColumn::make('quantities_sum_quantity')->sum('quantities', 'quantity')\n                     ->label('S.Qty')\n                     ->formatStateUsing(fn(string $state): string => $state * -1)\n                     ->summarize(Sum::make()->formatStateUsing(fn(string $state): string => $state * -1)),\n \n"
                },
                {
                    "date": 1733505745416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,8 +231,10 @@\n                                 $boughtqty = OrderItem::query()->where('product_id', $get('id'))->sum('p_quantity');\n                                 $soldqty = OrderItem::query()->where('product_id', $get('id'))->sum('quantity');\n                                 return $boughtqty - $soldqty;\n                             }),\n+                        TextInput::make('low_alert')\n+                            ->numeric(),\n                         Toggle::make('is_active')\n                             ->required()\n                             ->default(true),\n                         Toggle::make('in_stock')\n"
                },
                {
                    "date": 1733506476571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,8 +239,18 @@\n                             ->default(true),\n                         Toggle::make('in_stock')\n                             ->required()\n                             ->default(true),\n+                        Toggle::make('is_low')\n+                            ->default(function (Get $get, Set $set) {\n+                                $stock = $get('stock');\n+                                $low_alert = $get('low_alert');\n+                                if ($stock <=  $low_alert ) {\n+                                    return true;\n+                                } else {\n+                                    return false;\n+                                }\n+                            }),\n                         Toggle::make('is_featured')\n                             ->required(),\n                         Toggle::make('on_sale')\n                             ->disabled()\n"
                },
                {
                    "date": 1733506540646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,11 +244,11 @@\n                             ->default(function (Get $get, Set $set) {\n                                 $stock = $get('stock');\n                                 $low_alert = $get('low_alert');\n                                 if ($stock <=  $low_alert) {\n-                                    return true;\n+                                    $set('is_low', true);\n                                 } else {\n-                                    return false;\n+                                    $set('is_low', false);\n                                 }\n                             }),\n                         Toggle::make('is_featured')\n                             ->required(),\n"
                },
                {
                    "date": 1733506642301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,25 +232,28 @@\n                                 $soldqty = OrderItem::query()->where('product_id', $get('id'))->sum('quantity');\n                                 return $boughtqty - $soldqty;\n                             }),\n                         TextInput::make('low_alert')\n-                            ->numeric(),\n-                        Toggle::make('is_active')\n-                            ->required()\n-                            ->default(true),\n-                        Toggle::make('in_stock')\n-                            ->required()\n-                            ->default(true),\n-                        Toggle::make('is_low')\n-                            ->default(function (Get $get, Set $set) {\n+                            ->numeric()\n+                            ->afterStateUpdated(function (Get $get, Set $set) {\n                                 $stock = $get('stock');\n                                 $low_alert = $get('low_alert');\n                                 if ($stock <=  $low_alert) {\n                                     $set('is_low', true);\n                                 } else {\n                                     $set('is_low', false);\n                                 }\n                             }),\n+                        Toggle::make('is_active')\n+                            ->required()\n+                            ->default(true),\n+                        Toggle::make('in_stock')\n+                            ->required()\n+                            ->default(true),\n+                        Toggle::make('is_low')\n+                        ->disabled()\n+                        ->dehydrated()\n+                        ->required(),\n                         Toggle::make('is_featured')\n                             ->required(),\n                         Toggle::make('on_sale')\n                             ->disabled()\n"
                }
            ],
            "date": 1731220896610,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Filament\\Resources;\n\nuse App\\Filament\\Resources\\ProductResource\\Pages;\nuse App\\Filament\\Resources\\ProductResource\\Pages\\ViewProduct;\nuse App\\Filament\\Resources\\ProductResource\\RelationManagers;\nuse App\\Models\\OrderItem;\nuse App\\Models\\Product;\nuse App\\Models\\User;\nuse Filament\\Forms;\nuse Filament\\Forms\\Components\\FileUpload;\nuse Filament\\Forms\\Components\\Group;\nuse Filament\\Forms\\Components\\Hidden;\nuse Filament\\Forms\\Components\\MarkdownEditor;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\TagsInput;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Forms\\Components\\Toggle;\nuse Filament\\Forms\\Form;\nuse Filament\\Forms\\Get;\nuse Filament\\Forms\\Set;\nuse Filament\\Resources\\Resource;\nuse Filament\\Support\\RawJs;\nuse Filament\\Tables;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Tables\\Table;\nuse Filament\\Tables\\Actions\\ActionGroup;\nuse Filament\\Tables\\Actions\\CreateAction;\nuse Filament\\Tables\\Actions\\DeleteAction;\nuse Filament\\Tables\\Actions\\EditAction;\nuse Filament\\Tables\\Actions\\ViewAction;\nuse Filament\\Tables\\Columns\\IconColumn;\nuse Filament\\Tables\\Columns\\Summarizers\\Average;\nuse Filament\\Tables\\Columns\\Summarizers\\Sum;\nuse Filament\\Tables\\Columns\\TagsColumn;\nuse Filament\\Tables\\Columns\\ToggleColumn;\nuse Filament\\Tables\\Enums\\ActionsPosition;\nuse Filament\\Tables\\Filters\\Filter;\nuse Filament\\Tables\\Filters\\SelectFilter;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Database\\Eloquent\\Collection;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\SoftDeletingScope;\nuse Illuminate\\Support\\Facades\\Storage;\nuse illuminate\\Support\\Str;\nuse Illuminate\\Contracts\\Support\\Htmlable;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Ramsey\\Uuid\\Type\\Decimal;\nuse Illuminate\\Support\\Number;\n\nuse function Laravel\\Prompts\\error;\n\nclass ProductResource extends Resource\n{\n    protected static ?string $model = Product::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-cube';\n    protected static ?string $navigationGroup = 'Product';\n    protected static ?int $navigationSort = 3;\n    protected static ?string $recordTitleAttribute = 'alias';\n    public static function getGlobalSearchResultTitle(Model $record): string | Htmlable\n    {\n        return $record->slug;\n    }\n    public static function getGloballySearchableAttributes(): array\n    {\n        return ['name', 'variant', 'alias', 'slug'];\n    }\n    public static function getGlobalSearchResultDetails(Model $record): array\n    {\n        return [\n            'name' => $record->name,\n            'variant' => $record->variant,\n        ];\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form\n            ->schema([\n                Group::make()->schema([\n                    Section::make('Product Information')->schema([\n\n                        Hidden::make('branch_id')\n                            ->default(fn() => Auth::user()->branch_id)\n                            ->required(),\n\n                        Hidden::make('created_by')\n                            ->default(fn() => Auth::user()->id) ## keperluan untuk memilih user setelah ada auth\n                            // ->disabledOn('edit')\n                            ->required(),\n\n                        Hidden::make('updated_by')\n                            ->default(fn() => Auth::user()->id) ## keperluan untuk memilih user setelah ada auth\n                            ->required(),\n\n                        TextInput::make('sku')\n                            ->required()\n                            ->maxLength(255)\n                            ->columnSpanFull()\n                            ->readOnly(fn($record) => !is_null($record)), # tidak dapat diedit setelah terisi\n                        // ->unique(Product::class, 'sku', ignoreRecord: true)\n\n                        TextInput::make('name')\n                            ->required()\n                            ->live(onBlur: true)\n                            ->maxLength(255),\n\n                        TextInput::make('variant')\n                            ->live(onBlur: true)\n                            ->maxLength(255),\n\n                        TextInput::make('alias')\n                            ->placeholder(function (Set $set, Get $get) {\n                                $namanya = $get('name');\n                                $variannya = $get('variant');\n                                $cabangnya = $get('branch_id');\n                                if ($namanya == null) {\n                                    $set('alias', '');\n                                } else {\n                                    $set('alias', $namanya . \" \" . $variannya . \" \" . $cabangnya);\n                                }\n                            })\n                            ->required()\n                            ->maxLength(255)\n                            ->readOnly(),\n\n                        TextInput::make('slug')\n                            ->required()\n                            ->maxLength(255)\n                            ->placeholder(function (Set $set, Get $get) {\n                                $namanya = $get('name');\n                                $variannya = $get('variant');\n                                $cabangnya = $get('branch_id');\n                                $slugnya = $namanya . \" \" . $variannya . \" \" . $cabangnya;\n                                if ($slugnya == null) {\n                                    $set('slug', '');\n                                } else {\n                                    $set('slug', Str::slug($slugnya));\n                                }\n                            })\n                            ->readOnly()\n                            ->unique(Product::class, 'slug', ignoreRecord: true),\n\n                        MarkdownEditor::make('description')\n                            ->columnSpanFull()\n                            ->fileAttachmentsDirectory('products')\n                            ->disableToolbarButtons([\n                                'attachFiles',\n                            ])\n                    ])->columns(2),\n\n                    Section::make('Images')->schema([\n                        FileUpload::make('images')\n                            ->multiple()\n                            ->directory('products')\n                            ->maxFiles(20)\n                            ->reorderable(),\n                    ])\n                ])->columnSpan(['sm' => 2, 'md' => 2, 'lg' => 2, 'xl' => 2]),\n\n                Group::make()->schema([\n\n                    Section::make('Associations')->schema([\n                        Select::make('branch_id')\n                            ->required()\n                            ->searchable()\n                            ->preload()\n                            ->relationship('branch', 'name'),\n\n                        Select::make('category_id')\n                            ->required()\n                            ->searchable()\n                            ->preload()\n                            ->relationship('category', 'name'),\n\n                        Select::make('brand_id')\n                            ->required()\n                            ->searchable()\n                            ->preload()\n                            ->relationship('brand', 'name'),\n\n                        TagsInput::make('tags')\n                            ->separator(',')\n                            ->reorderable(),\n                    ]),\n\n                    Section::make('Price')->schema([\n                        TextInput::make('cogs')\n                            ->mask(RawJs::make('$money($input)'))\n                            ->stripCharacters(',')\n                            ->live(onBlur: true)\n                            ->numeric()\n                            ->required()\n                            ->prefix('Rp'),\n\n                        TextInput::make('price')\n                            ->mask(RawJs::make('$money($input)'))\n                            ->stripCharacters(',')\n                            ->live(onBlur: true)\n                            ->numeric()\n                            ->required()\n                            ->prefix('Rp'),\n\n                        TextInput::make('strikethroughprice')\n                            ->placeholder('harga coret')\n                            ->mask(RawJs::make('$money($input)'))\n                            ->stripCharacters(',')\n                            ->live(onBlur: true)\n                            ->afterStateUpdated(function (Set $set, Get $get) {\n                                $hargacoret = $get('strikethroughprice');\n                                if ($hargacoret == null || $hargacoret <= 0) {\n                                    $set('on_sale', false);\n                                } else {\n                                    $set('on_sale', true);\n                                }\n                            })\n                            ->numeric()\n                            ->prefix('Rp'),\n                    ]),\n\n                    Section::make('Status')->schema([\n                        // TextInput::make('id')\n                        //     ->default(Product::query()->where('id', 'id'))\n                        //     ->readOnly(),\n                        TextInput::make('stock')\n                            ->readOnly()\n                            ->placeholder(function (Get $get) {\n                                $boughtqty = OrderItem::query()->where('product_id', $get('id'))->sum('p_quantity');\n                                $soldqty = OrderItem::query()->where('product_id', $get('id'))->sum('quantity');\n                                return $boughtqty - $soldqty;\n                            }),\n                        Toggle::make('is_active')\n                            ->required()\n                            ->default(true),\n                        Toggle::make('in_stock')\n                            ->required()\n                            ->default(true),\n                        Toggle::make('is_featured')\n                            ->required(),\n                        Toggle::make('on_sale')\n                            ->disabled()\n                            ->dehydrated()\n                            ->required(),\n                        TextInput::make('rating')\n                            ->numeric()\n                            ->required(),\n                    ]),\n                ])->columnSpan(['sm' => 1, 'md' => 1, 'lg' => 1, 'xl' => 1]),\n            ])->columns(['sm' => 3, 'md' => 3, 'lg' => 3, 'xl' => 3]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n\n            ->modifyQueryUsing(function (Builder $query) {\n                return $query->addSelect([\n                    'created' => User::query()->select('name')\n                        ->whereColumn('id', 'created_by'),\n                    'updated' => User::query()->select('name')\n                        ->whereColumn('id', 'updated_by'),\n                ]);\n            })\n\n            ->columns([\n\n                ToggleColumn::make('is_active')\n                    ->label('Active')\n                    ->sortable(),\n\n                ToggleColumn::make('in_stock')\n                    ->label('Stock')\n                    ->sortable(),\n\n                TextColumn::make('name')\n                    ->searchable()\n                    ->sortable(),\n\n                TextColumn::make('variant')\n                    ->searchable()\n                    ->sortable(),\n\n                TagsColumn::make('tags')\n                    ->searchable()\n                    ->sortable(),\n\n                TextColumn::make('category.name')\n                    ->sortable()\n                    ->toggleable(isToggledHiddenByDefault: true),\n\n                TextColumn::make('brand.name')\n                    ->sortable()\n                    ->toggleable(isToggledHiddenByDefault: true),\n\n                TextColumn::make('price')\n                    ->alignRight()\n                    ->numeric(locale: 'nl')->prefix('Rp ')\n                    ->summarize(Sum::make()->numeric(locale: 'nl')->prefix('Rp ')->label('Total'))\n                    ->sortable(),\n\n                TextColumn::make('stock')\n                    ->state(function (Product $record): float {\n                        return $record->pquantities_sum_p_quantity - $record->quantities_sum_quantity;\n                    }),\n\n                IconColumn::make('is_featured')\n                    ->sortable()\n                    ->boolean(),\n\n                IconColumn::make('on_sale')\n                    ->sortable()\n                    ->boolean(),\n\n                TextColumn::make('pquantities_sum_p_quantity')->sum('pquantities', 'p_quantity')\n                    ->label('B.Qty')\n                    ->formatStateUsing(fn(string $state): string => $state * 1)\n                    ->summarize(Sum::make()->formatStateUsing(fn(string $state): string => $state * 1)),\n\n                TextColumn::make('quantities_sum_quantity')->sum('quantities', 'quantity')\n                    ->label('S.Qty')\n                    ->formatStateUsing(fn(string $state): string => $state * -1)\n                    ->summarize(Sum::make()->formatStateUsing(fn(string $state): string => $state * -1)),\n\n                TextColumn::make('pquantities_sum_p_total_amount')->sum('pquantities', 'p_total_amount')\n                    ->label('Avg.Bought')\n                    ->prefix('Rp ')\n                    ->formatStateUsing(fn(string $state): string => $state * -1)\n                    ->state(function (Product $record): float {\n                        $qta = $record->pquantities_sum_p_total_amount;\n                        $qtt = $record->pquantities_sum_p_quantity;\n                        if ($qtt < 1) {\n                            $qt = 1;\n                        } else {\n                            $qt = $qtt;\n                        }\n                        return $qta / $qt;\n                    }),\n\n                TextColumn::make('quantities_sum_total_amount')->sum('quantities', 'total_amount')\n                    ->label('Avg.Sold')\n                    ->prefix('Rp ')\n                    ->formatStateUsing(fn(string $state): string => $state * 1)\n                    ->state(function (Product $record): float {\n                        $qta = $record->quantities_sum_total_amount;\n                        $qtt = $record->quantities_sum_quantity;\n                        if ($qtt < 1) {\n                            $qt = 1;\n                        } else {\n                            $qt = $qtt;\n                        }\n                        return $qta / $qt;\n                    }),\n\n                TextColumn::make('ptquantities_sum_p_total_amount')->sum('ptquantities', 'p_total_amount')\n                    ->label('T.Bought')\n                    ->prefix('Rp ')\n                    ->formatStateUsing(fn(string $state): string => $state * -1),\n\n                TextColumn::make('tquantities_sum_total_amount')->sum('tquantities', 'total_amount')\n                    ->label('T.Sold')\n                    ->prefix('Rp ')\n                    ->formatStateUsing(fn(string $state): string => $state * 1),\n\n                TextColumn::make('margin')\n                    ->prefix('Rp ')\n                    ->state(function (Product $record): float {\n                        return $record->tquantities_sum_total_amount - $record->ptquantities_sum_p_total_amount;\n                    }),\n\n                TextColumn::make('created_at')\n                    ->dateTime()\n                    ->sortable()\n                    ->toggleable(isToggledHiddenByDefault: true),\n\n                TextColumn::make('updated_at')\n                    ->dateTime()\n                    ->sortable()\n                    ->toggleable(isToggledHiddenByDefault: true),\n\n                TextColumn::make('created')\n                    ->label('Created by')\n                    ->sortable()\n                    ->toggleable(isToggledHiddenByDefault: true),\n\n                TextColumn::make('updated')\n                    ->label('Updated by')\n                    ->sortable()\n                    ->toggleable(isToggledHiddenByDefault: true),\n\n            ])\n            // ->defaultGroup('name')\n            // ->groupsOnly()\n            ->filters([\n                Filter::make('is_active')\n                    ->label('non-active')\n                    ->query(fn(Builder $query): Builder => $query->where('is_active', false)),\n                SelectFilter::make('category')\n                    ->relationship('category', 'name'),\n                SelectFilter::make('brand')\n                    ->relationship('brand', 'name'),\n            ])\n            ->actions([\n                ActionGroup::make([\n                    ViewAction::make(),\n                    EditAction::make(),\n                ])\n            ], position: ActionsPosition::BeforeColumns)\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n\n                    Tables\\Actions\\BulkAction::make(name: 'Active?')\n                        ->requiresConfirmation()\n                        ->color('info')\n                        ->icon('heroicon-o-rocket-launch')\n                        ->action(function (Collection $records, array $data): void {\n                            foreach ($records as $record) {\n                                $record->is_active = $data['is_active'];\n                                $record->save();\n                            }\n                        })\n                        ->form([\n                            Toggle::make('is_active')\n                                ->label('Active?')\n                                ->required(),\n                        ]),\n\n                    Tables\\Actions\\BulkAction::make(name: 'Stock?')\n                        ->requiresConfirmation()\n                        ->color('success')\n                        ->icon('heroicon-o-cube')\n                        ->action(function (Collection $records, array $data): void {\n                            foreach ($records as $record) {\n                                $record->in_stock = $data['in_stock'];\n                                $record->save();\n                            }\n                        })\n                        ->form([\n                            Toggle::make('in_stock')\n                                ->label('Stock?')\n                                ->required(),\n                        ]),\n\n                    Tables\\Actions\\DeleteBulkAction::make()->after(function (Collection\n                    $records) {\n                        foreach ($records as $key => $value) {\n                            if ($value->images) {\n                                Storage::disk('public')->delete($value->images);\n                            }\n                        }\n                    }),\n\n                ]),\n            ])\n            ->recordAction(Tables\\Actions\\ViewAction::class)\n            ->recordUrl(null)\n            ->query(function (Product $query) {\n                if (Auth::user()->id != 1) {\n                    return $query->where('branch_id', Auth::user()->branch_id);\n                } else {\n                    return $query;\n                };\n            });\n    }\n\n    public static function getRelations(): array\n    {\n        return [\n            //\n        ];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListProducts::route('/'),\n            'create' => Pages\\CreateProduct::route('/create'),\n            'edit' => Pages\\EditProduct::route('/{record}/edit'),\n        ];\n    }\n}\n"
        }
    ]
}