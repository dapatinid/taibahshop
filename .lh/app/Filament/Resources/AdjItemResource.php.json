{
    "sourceFile": "app/Filament/Resources/AdjItemResource.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1731263564095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1732172864838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -387,13 +387,15 @@\n \n                 TextColumn::make('created')\n                     ->label('Created by')\n                     ->sortable()\n+                    ->searchable()\n                     ->toggleable(isToggledHiddenByDefault: true),\n \n                 TextColumn::make('updated')\n                     ->label('Updated by')\n                     ->sortable()\n+                    ->searchable()\n                     ->toggleable(isToggledHiddenByDefault: true),\n             ])->defaultSort('created_at', 'desc')\n \n             ->filters([\n"
                },
                {
                    "date": 1732172887381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -387,15 +387,13 @@\n \n                 TextColumn::make('created')\n                     ->label('Created by')\n                     ->sortable()\n-                    ->searchable()\n                     ->toggleable(isToggledHiddenByDefault: true),\n \n                 TextColumn::make('updated')\n                     ->label('Updated by')\n                     ->sortable()\n-                    ->searchable()\n                     ->toggleable(isToggledHiddenByDefault: true),\n             ])->defaultSort('created_at', 'desc')\n \n             ->filters([\n"
                },
                {
                    "date": 1733249101997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n                             ->required(),\n \n                         TextInput::make('code_tr')\n                             ->label('No. Transsaction')\n-                            ->default('ADJ' . date('YmdHis')) ## Jika ingin menggunakan OrderID otomatis\n+                            ->default('ADJ' . date('YmdHis') . '-' . Auth::user()->id) ## Jika ingin menggunakan OrderID otomatis\n                             ->readOnly()\n                             ->columnSpan(4),\n \n                         DateTimePicker::make('date_order')\n"
                },
                {
                    "date": 1734019247594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n     protected static ?string $model = AdjItem::class;\n \n     protected static ?string $label = 'Adjustment';\n     protected static ?string $navigationGroup = 'Product';\n-    protected static ?int $navigationSort = 4;\n+    protected static ?int $navigationSort = 5;\n \n     protected static ?string $navigationIcon = 'heroicon-o-calculator';\n \n     public static function form(Form $form): Form\n"
                },
                {
                    "date": 1734020904908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,19 +104,22 @@\n                             ->columnSpan(6)\n                             ->options([\n                                 'new' => 'New',\n                                 'pending' => 'Pending',\n-                                'done' => 'Done'\n+                                'done' => 'Done',\n+                                'canceled' => 'Canceled'\n                             ])\n                             ->colors([\n                                 'new' => 'info',\n                                 'pending' => 'warning',\n-                                'done' => 'success'\n+                                'done' => 'success',\n+                                'canceled' => 'danger'\n                             ])\n                             ->icons([\n                                 'new' => 'heroicon-m-sparkles',\n                                 'pending' => 'heroicon-m-arrow-path',\n-                                'done' => 'heroicon-m-check-badge'\n+                                'done' => 'heroicon-m-check-badge',\n+                                'canceled' => 'heroicon-m-x-circle'\n                             ]),\n \n                         Textarea::make('notes')\n                             ->autosize()\n"
                },
                {
                    "date": 1734048067490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,22 +104,19 @@\n                             ->columnSpan(6)\n                             ->options([\n                                 'new' => 'New',\n                                 'pending' => 'Pending',\n-                                'done' => 'Done',\n-                                'canceled' => 'Canceled'\n+                                'done' => 'Done'\n                             ])\n                             ->colors([\n                                 'new' => 'info',\n                                 'pending' => 'warning',\n-                                'done' => 'success',\n-                                'canceled' => 'danger'\n+                                'done' => 'success'\n                             ])\n                             ->icons([\n                                 'new' => 'heroicon-m-sparkles',\n                                 'pending' => 'heroicon-m-arrow-path',\n-                                'done' => 'heroicon-m-check-badge',\n-                                'canceled' => 'heroicon-m-x-circle'\n+                                'done' => 'heroicon-m-check-badge'\n                             ]),\n \n                         Textarea::make('notes')\n                             ->autosize()\n"
                },
                {
                    "date": 1734050422323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,10 +147,11 @@\n                                     ->afterStateUpdated(fn($state, Set $set) => $set('p_unit_amount', Product::find($state)?->cogs ?? 0))\n                                     ->afterStateUpdated(fn($state, Set $set, Get $get) => $set('p_total_amount', Product::find($state)?->cogs * $get('quantity') ?? 0))\n \n                                     ->afterStateUpdated(function (Get $get, Set $set) {\n-                                        $boughtqty = OrderItem::query()->where('product_id', $get('product_id'))->sum('p_quantity');\n-                                        $soldqty = OrderItem::query()->where('product_id', $get('product_id'))->sum('quantity');\n+                                        $orderitems = OrderItem::leftJoin('orders', 'order_items.id', '=', 'orders.id')->leftJoin('porders', 'order_items.id', '=', 'porders.id')->get()->where('order.status', '!=', 'canceled')->where('porder.status', '!=', 'canceled');\n+                                        $boughtqty = $orderitems->where('product_id', $get('product_id'))->sum('p_quantity');\n+                                        $soldqty = $orderitems->where('product_id', $get('product_id'))->sum('quantity');\n                                         $set('stock_before', $boughtqty - $soldqty);\n                                     })\n \n \n"
                },
                {
                    "date": 1735296997776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -413,9 +413,10 @@\n                                 $data['date_order_until'],\n                                 fn(Builder $query, $date): Builder => $query->whereDate('date_order', '<=', $date),\n                             );\n                     }),\n-            ])\n+                    Tables\\Filters\\TrashedFilter::make()\n+                    ])\n             ->actions([\n                 Tables\\Actions\\ViewAction::make(),\n                 Tables\\Actions\\EditAction::make(),\n             ])\n"
                },
                {
                    "date": 1735297160950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -444,9 +444,11 @@\n                                 ])\n                                 ->required(),\n                         ]),\n \n-                    Tables\\Actions\\DeleteBulkAction::make(),\n+                        Tables\\Actions\\DeleteBulkAction::make(),\n+                        Tables\\Actions\\ForceDeleteBulkAction::make(),\n+                        Tables\\Actions\\RestoreBulkAction::make(),\n \n                 ]),\n             ])\n             ->query(function (AdjItem $query) {\n"
                },
                {
                    "date": 1735297325299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -466,8 +466,16 @@\n             //\n         ];\n     }\n \n+    public static function getEloquentQuery(): Builder\n+    {\n+        return parent::getEloquentQuery()\n+            ->withoutGlobalScopes([\n+                SoftDeletingScope::class,\n+            ]);\n+    }\n+    \n     public static function getPages(): array\n     {\n         return [\n             'index' => Pages\\ListAdjItems::route('/'),\n"
                },
                {
                    "date": 1735403614189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,9 +166,9 @@\n \n                                 TextInput::make('stock_after')\n                                     ->label('Stock After')\n                                     ->numeric()\n-                                    ->live(onBlur: true)\n+                                    ->live(debounce: 1000)\n                                     ->afterStateUpdated(function ($state, Get $get, Set $set) {\n                                         $stbefore = $get('stock_before');\n                                         $value = $state - $stbefore;\n                                         if ($value >= 0) {\n@@ -205,9 +205,9 @@\n                                     ->default(0)\n                                     ->numeric()\n                                     ->required()\n                                     ->minValue(0)\n-                                    ->live(onBlur: true)\n+                                    ->live(debounce: 1000)\n                                     ->afterStateUpdated(fn($state, Set $set, Get $get) => $set('total_amount', $state * $get('unit_amount')))\n                                     ->columnSpan(['sm' => 4, 'md' => 4, 'lg' => 4, 'xl' => 4]),\n \n                                 TextInput::make('unit_amount')\n@@ -215,9 +215,9 @@\n                                     ->readOnly()\n                                     ->required()\n                                     ->dehydrated()\n                                     ->numeric()\n-                                    ->live(onBlur: true)\n+                                    ->live(debounce: 1000)\n                                     ->afterStateUpdated(fn($state, Set $set, Get $get) => $set('total_amount', $state * $get('p_quantity')))\n                                     ->columnSpan(['sm' => 4, 'md' => 4, 'lg' => 4, 'xl' => 4]),\n \n                                 TextInput::make('total_amount')\n@@ -244,9 +244,9 @@\n                                     ->default(0)\n                                     ->numeric()\n                                     ->required()\n                                     ->minValue(0)\n-                                    ->live(onBlur: true)\n+                                    ->live(debounce: 1000)\n                                     ->afterStateHydrated(fn($state, Set $set, Get $get) => $set('p_total_amount', $state * $get('p_unit_amount')))\n                                     ->columnSpan(['sm' => 4, 'md' => 4, 'lg' => 4, 'xl' => 4]),\n \n                                 TextInput::make('p_unit_amount')\n@@ -254,9 +254,9 @@\n                                     ->readOnly()\n                                     ->required()\n                                     ->dehydrated()\n                                     ->numeric()\n-                                    ->live(onBlur: true)\n+                                    ->live(debounce: 1000)\n                                     ->afterStateUpdated(fn($state, Set $set, Get $get) => $set('p_total_amount', $state * $get('quantity')))\n                                     ->columnSpan(['sm' => 4, 'md' => 4, 'lg' => 4, 'xl' => 4]),\n \n                                 TextInput::make('p_total_amount')\n"
                },
                {
                    "date": 1735403679009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -413,10 +413,10 @@\n                                 $data['date_order_until'],\n                                 fn(Builder $query, $date): Builder => $query->whereDate('date_order', '<=', $date),\n                             );\n                     }),\n-                    Tables\\Filters\\TrashedFilter::make()\n-                    ])\n+                Tables\\Filters\\TrashedFilter::make()\n+            ])\n             ->actions([\n                 Tables\\Actions\\ViewAction::make(),\n                 Tables\\Actions\\EditAction::make(),\n             ])\n@@ -444,11 +444,11 @@\n                                 ])\n                                 ->required(),\n                         ]),\n \n-                        Tables\\Actions\\DeleteBulkAction::make(),\n-                        Tables\\Actions\\ForceDeleteBulkAction::make(),\n-                        Tables\\Actions\\RestoreBulkAction::make(),\n+                    Tables\\Actions\\DeleteBulkAction::make(),\n+                    Tables\\Actions\\ForceDeleteBulkAction::make(),\n+                    Tables\\Actions\\RestoreBulkAction::make(),\n \n                 ]),\n             ])\n             ->query(function (AdjItem $query) {\n@@ -473,9 +473,9 @@\n             ->withoutGlobalScopes([\n                 SoftDeletingScope::class,\n             ]);\n     }\n-    \n+\n     public static function getPages(): array\n     {\n         return [\n             'index' => Pages\\ListAdjItems::route('/'),\n"
                }
            ],
            "date": 1731263564095,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Filament\\Resources;\n\nuse App\\Filament\\Resources\\AdjItemResource\\Pages;\nuse App\\Filament\\Resources\\AdjItemResource\\RelationManagers;\nuse App\\Models\\AdjItem;\nuse App\\Models\\OrderItem;\nuse App\\Models\\Product;\nuse App\\Models\\User;\nuse Filament\\Forms\\Components\\Actions\\Action;\nuse Filament\\Forms;\nuse Filament\\Forms\\Components\\DatePicker;\nuse Filament\\Forms\\Components\\DateTimePicker;\nuse Filament\\Forms\\Components\\Group;\nuse Filament\\Forms\\Components\\Hidden;\nuse Filament\\Forms\\Components\\Placeholder;\nuse Filament\\Forms\\Components\\Repeater;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Textarea;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Forms\\Components\\ToggleButtons;\nuse Filament\\Forms\\Form;\nuse Filament\\Forms\\Get;\nuse Filament\\Forms\\Set;\nuse Filament\\Resources\\Resource;\nuse Filament\\Tables;\nuse Filament\\Tables\\Columns\\SelectColumn;\nuse Filament\\Tables\\Columns\\Summarizers\\Sum;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Tables\\Filters\\Filter;\nuse Filament\\Tables\\Table;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Database\\Eloquent\\Collection;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\SoftDeletingScope;\nuse Illuminate\\Support\\Collection as SupportCollection;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Number;\n\nclass AdjItemResource extends Resource\n{\n    protected static ?string $model = AdjItem::class;\n\n    protected static ?string $label = 'Adjustment';\n    protected static ?string $navigationGroup = 'Product';\n    protected static ?int $navigationSort = 4;\n\n    protected static ?string $navigationIcon = 'heroicon-o-calculator';\n\n    public static function form(Form $form): Form\n    {\n        return $form\n            ->schema([\n                Group::make()->schema([\n                    Section::make('Adj. Information')->schema([\n\n                        Hidden::make('branch_id')\n                            ->default(fn() => Auth::user()->branch_id)\n                            ->required(),\n\n                        Hidden::make('created_by')\n                            ->default(fn() => Auth::user()->id) ## keperluan untuk memilih user setelah ada auth\n                            // ->disabledOn('edit')\n                            ->required(),\n\n                        Hidden::make('updated_by')\n                            ->default(fn() => Auth::user()->id) ## keperluan untuk memilih user setelah ada auth\n                            ->required(),\n\n                        TextInput::make('code_tr')\n                            ->label('No. Transsaction')\n                            ->default('ADJ' . date('YmdHis')) ## Jika ingin menggunakan OrderID otomatis\n                            ->readOnly()\n                            ->columnSpan(4),\n\n                        DateTimePicker::make('date_order')\n                            ->label('Date Adj.')\n                            ->default(now())\n                            ->required()\n                            ->readOnly()\n                            ->columnSpan(4),\n\n                        Hidden::make('user_id')\n                            ->label('User')\n                            ->required()\n                            ->default(fn() => Auth::user()->id),\n\n                        Select::make('currency')\n                            ->default('idr')\n                            ->required()\n                            ->options([\n                                'idr' => 'IDR',\n                                'usd' => 'USD',\n                                'eur' => 'EUR'\n                            ])\n                            ->columnSpan(4),\n\n                        ToggleButtons::make('status')\n                            ->inline()\n                            ->default('new')\n                            ->required()\n                            ->columnSpan(6)\n                            ->options([\n                                'new' => 'New',\n                                'pending' => 'Pending',\n                                'done' => 'Done'\n                            ])\n                            ->colors([\n                                'new' => 'info',\n                                'pending' => 'warning',\n                                'done' => 'success'\n                            ])\n                            ->icons([\n                                'new' => 'heroicon-m-sparkles',\n                                'pending' => 'heroicon-m-arrow-path',\n                                'done' => 'heroicon-m-check-badge'\n                            ]),\n\n                        Textarea::make('notes')\n                            ->autosize()\n                            ->columnSpan(6)\n                    ])->columns(['sm' => 12, 'md' => 12, 'lg' => 12, 'xl' => 12]),\n\n                    Section::make('Adj. Items')->schema([\n                        Repeater::make('items')\n                            ->relationship()\n                            ->reorderable()\n                            ->schema([\n\n                                Select::make('product_id')\n                                    ->relationship(\n                                        name: 'product',\n                                        modifyQueryUsing: fn(Builder $query) => $query->orderBy('name')->orderBy('variant')->where('branch_id', Auth::user()->branch_id),\n                                    )\n                                    ->getOptionLabelFromRecordUsing(fn(Model $record) => \"{$record->name} {$record->variant}\")\n                                    ->searchable(['name', 'variant'])\n                                    ->preload()\n                                    ->required()\n                                    ->live()\n                                    ->distinct()\n                                    ->disableOptionsWhenSelectedInSiblingRepeaterItems()\n                                    ->reactive()\n                                    ->afterStateUpdated(fn($state, Set $set) => $set('unit_amount', Product::find($state)?->cogs ?? 0))\n                                    ->afterStateUpdated(fn($state, Set $set, Get $get) => $set('total_amount', Product::find($state)?->cogs * $get('p_quantity') ?? 0))\n                                    ->afterStateUpdated(fn($state, Set $set) => $set('p_unit_amount', Product::find($state)?->cogs ?? 0))\n                                    ->afterStateUpdated(fn($state, Set $set, Get $get) => $set('p_total_amount', Product::find($state)?->cogs * $get('quantity') ?? 0))\n\n                                    ->afterStateUpdated(function (Get $get, Set $set) {\n                                        $boughtqty = OrderItem::query()->where('product_id', $get('product_id'))->sum('p_quantity');\n                                        $soldqty = OrderItem::query()->where('product_id', $get('product_id'))->sum('quantity');\n                                        $set('stock_before', $boughtqty - $soldqty);\n                                    })\n\n\n                                    ->columnSpan(['sm' => 5, 'md' => 5, 'lg' => 5, 'xl' => 5]),\n\n                                TextInput::make('stock_before')\n                                    ->label('Stock Before')\n                                    ->live()\n                                    ->disabled()\n                                    ->dehydrated()\n                                    ->columnSpan(['sm' => 2, 'md' => 2, 'lg' => 2, 'xl' => 2]),\n\n                                TextInput::make('stock_after')\n                                    ->label('Stock After')\n                                    ->numeric()\n                                    ->live(onBlur: true)\n                                    ->afterStateUpdated(function ($state, Get $get, Set $set) {\n                                        $stbefore = $get('stock_before');\n                                        $value = $state - $stbefore;\n                                        if ($value >= 0) {\n                                            $set('p_quantity', $value);\n                                        } else {\n                                            $set('p_quantity', 0);\n                                        }\n                                    })\n                                    ->afterStateUpdated(function ($state, Get $get, Set $set) {\n                                        $stbefore = $get('stock_before');\n                                        $value = $state - $stbefore;\n                                        if ($value < 0) {\n                                            $set('quantity', $value * -1);\n                                        } else {\n                                            $set('quantity', 0);\n                                        }\n                                    })\n                                    ->columnSpan(['sm' => 2, 'md' => 2, 'lg' => 2, 'xl' => 2]),\n\n                                Select::make('branch_id')\n                                    ->default(fn() => Auth::user()->branch_id)\n                                    ->relationship(\n                                        name: 'branch',\n                                        modifyQueryUsing: fn(Builder $query) => $query->orderBy('name')->where('is_active', 1),\n                                    )\n                                    ->getOptionLabelFromRecordUsing(fn(Model $record) => \"{$record->name}\")\n                                    ->disabled()\n                                    ->dehydrated()\n                                    ->columnSpan(['sm' => 3, 'md' => 3, 'lg' => 3, 'xl' => 3]),\n\n                                TextInput::make('p_quantity')\n                                    ->label('Qty Get')\n                                    ->readOnly()\n                                    ->default(0)\n                                    ->numeric()\n                                    ->required()\n                                    ->minValue(0)\n                                    ->live(onBlur: true)\n                                    ->afterStateUpdated(fn($state, Set $set, Get $get) => $set('total_amount', $state * $get('unit_amount')))\n                                    ->columnSpan(['sm' => 4, 'md' => 4, 'lg' => 4, 'xl' => 4]),\n\n                                TextInput::make('unit_amount')\n                                    ->label('Amount Get')\n                                    ->readOnly()\n                                    ->required()\n                                    ->dehydrated()\n                                    ->numeric()\n                                    ->live(onBlur: true)\n                                    ->afterStateUpdated(fn($state, Set $set, Get $get) => $set('total_amount', $state * $get('p_quantity')))\n                                    ->columnSpan(['sm' => 4, 'md' => 4, 'lg' => 4, 'xl' => 4]),\n\n                                TextInput::make('total_amount')\n                                    ->label('T.Amount Get')\n                                    ->required()\n                                    ->disabled()\n                                    ->dehydrated()\n                                    ->numeric()\n                                    ->placeholder(function (Set $set, Get $get) {\n                                        $stbefore = $get('stock_before');\n                                        $stafter = $get('stock_after');\n                                        $value = $stafter - $stbefore;\n                                        if ($value >= 0) {\n                                            $set('total_amount', $value * $get('unit_amount'));\n                                        } else {\n                                            $set('total_amount', 0);\n                                        }\n                                    })\n                                    ->columnSpan(['sm' => 4, 'md' => 4, 'lg' => 4, 'xl' => 4]),\n\n                                TextInput::make('quantity')\n                                    ->label('Qty Loss')\n                                    ->readOnly()\n                                    ->default(0)\n                                    ->numeric()\n                                    ->required()\n                                    ->minValue(0)\n                                    ->live(onBlur: true)\n                                    ->afterStateHydrated(fn($state, Set $set, Get $get) => $set('p_total_amount', $state * $get('p_unit_amount')))\n                                    ->columnSpan(['sm' => 4, 'md' => 4, 'lg' => 4, 'xl' => 4]),\n\n                                TextInput::make('p_unit_amount')\n                                    ->label('Amount Loss')\n                                    ->readOnly()\n                                    ->required()\n                                    ->dehydrated()\n                                    ->numeric()\n                                    ->live(onBlur: true)\n                                    ->afterStateUpdated(fn($state, Set $set, Get $get) => $set('p_total_amount', $state * $get('quantity')))\n                                    ->columnSpan(['sm' => 4, 'md' => 4, 'lg' => 4, 'xl' => 4]),\n\n                                TextInput::make('p_total_amount')\n                                    ->label('T.Amount Loss')\n                                    ->required()\n                                    ->disabled()\n                                    ->numeric()\n                                    ->placeholder(function (Set $set, Get $get) {\n                                        $stbefore = $get('stock_before');\n                                        $stafter = $get('stock_after');\n                                        $value = $stafter - $stbefore;\n                                        if ($value < 0) {\n                                            $set('p_total_amount', $value * -1 * $get('p_unit_amount'));\n                                        } else {\n                                            $set('p_total_amount', 0);\n                                        }\n                                    })\n                                    ->columnSpan(['sm' => 4, 'md' => 4, 'lg' => 4, 'xl' => 4]),\n\n                                TextInput::make('notes')\n                                    ->label('Description')\n                                    ->columnSpan(['sm' => 12, 'md' => 12, 'lg' => 12, 'xl' => 12]),\n\n                                Hidden::make('mutation_type')\n                                    ->default('Adjusment'),\n\n                            ])\n                            ->columns(['sm' => 12, 'md' => 12, 'lg' => 12, 'xl' => 12])\n                            ->extraItemActions([\n                                Action::make('openProduct')\n                                    ->tooltip('Open product')\n                                    ->icon('heroicon-m-arrow-top-right-on-square')\n                                    ->url(function (array $arguments, Repeater $component): ?string {\n                                        $itemData = $component->getRawItemState($arguments['item']);\n\n                                        $product = Product::find($itemData['product_id']);\n\n                                        if (! $product) {\n                                            return null;\n                                        }\n\n                                        return ProductResource::getUrl('edit', ['record' => $product]);\n                                    }, shouldOpenInNewTab: true)\n                                    ->hidden(fn(array $arguments, Repeater $component): bool => blank($component->getRawItemState($arguments['item'])['product_id'])),\n                            ]),\n\n                        Group::make()->schema([\n\n                            Placeholder::make('grand_total_placeholder')\n                                ->label('Grand Total')\n                                ->content(function (Get $get, Set $set) {\n\n                                    $total = 0;\n                                    if (!$repeaters = $get('items')) {\n                                        return $total;\n                                    }\n                                    foreach ($repeaters as $key => $repeater) {\n                                        $total += $get(\"items.{$key}.total_amount\") - $get(\"items.{$key}.p_total_amount\");\n                                    }\n\n                                    $grandTotal = $total;\n                                    $set('grand_total', $grandTotal);\n                                    return Number::currency($grandTotal, 'IDR');\n                                }),\n\n                            Hidden::make('grand_total')\n                                ->default(0)\n\n                        ])->columns(['sm' => 3, 'md' => 3, 'lg' => 3, 'xl' => 3])\n                    ])\n                ])->columnSpanFull()\n            ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->modifyQueryUsing(function (Builder $query) {\n                return $query->addSelect([\n                    'created' => User::query()->select('name')\n                        ->whereColumn('id', 'created_by'),\n                    'updated' => User::query()->select('name')\n                        ->whereColumn('id', 'updated_by'),\n                ]);\n            })\n            ->columns([\n\n                TextColumn::make('code_tr')\n                    ->label('Code')\n                    ->sortable()\n                    ->searchable(),\n\n                TextColumn::make('user.name')\n                    ->label('User')\n                    ->sortable()\n                    ->searchable(),\n                // ->searchable(isIndividual:true),\n\n                TextColumn::make('grand_total')\n                    ->numeric(locale: 'nl')->prefix('Rp ')\n                    ->sortable()\n                    ->alignRight()\n                    ->summarize(Sum::make()->numeric(locale: 'nl')->prefix('Rp ')->label('Total')),\n\n                SelectColumn::make('status')\n                    ->options([\n                        'new' => 'New',\n                        'pending' => 'Pending',\n                        'done' => 'Done'\n                    ])\n                    ->searchable()\n                    ->sortable()\n                    ->selectablePlaceholder(false),\n\n                TextColumn::make('date_order')\n                    ->dateTime()\n                    ->sortable()\n                    ->toggleable(isToggledHiddenByDefault: true),\n\n                TextColumn::make('created_at')\n                    ->dateTime()\n                    ->sortable()\n                    ->toggleable(isToggledHiddenByDefault: true),\n\n                TextColumn::make('updated_at')\n                    ->dateTime()\n                    ->sortable()\n                    ->toggleable(isToggledHiddenByDefault: true),\n\n                TextColumn::make('created')\n                    ->label('Created by')\n                    ->sortable()\n                    ->toggleable(isToggledHiddenByDefault: true),\n\n                TextColumn::make('updated')\n                    ->label('Updated by')\n                    ->sortable()\n                    ->toggleable(isToggledHiddenByDefault: true),\n            ])->defaultSort('created_at', 'desc')\n\n            ->filters([\n                Filter::make('created_at')\n                    ->form([\n                        DatePicker::make('date_order_from'),\n                        DatePicker::make('date_order_until'),\n                    ])\n                    ->query(function (Builder $query, array $data): Builder {\n                        return $query\n                            ->when(\n                                $data['date_order_from'],\n                                fn(Builder $query, $date): Builder => $query->whereDate('date_order', '>=', $date),\n                            )\n                            ->when(\n                                $data['date_order_until'],\n                                fn(Builder $query, $date): Builder => $query->whereDate('date_order', '<=', $date),\n                            );\n                    }),\n            ])\n            ->actions([\n                Tables\\Actions\\ViewAction::make(),\n                Tables\\Actions\\EditAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n\n                    Tables\\Actions\\BulkAction::make(name: 'Status')\n                        ->requiresConfirmation()\n                        ->deselectRecordsAfterCompletion()\n                        ->color('warning')\n                        ->icon('heroicon-o-flag')\n                        ->action(function (Collection $records, array $data): void {\n                            foreach ($records as $record) {\n                                $record->status = $data['status'];\n                                $record->save();\n                            }\n                        })\n                        ->form([\n                            Select::make('status')\n                                ->label('Status')\n                                ->options([\n                                    'new' => 'New',\n                                    'pending' => 'Pending',\n                                    'done' => 'Done'\n                                ])\n                                ->required(),\n                        ]),\n\n                    Tables\\Actions\\DeleteBulkAction::make(),\n\n                ]),\n            ])\n            ->query(function (AdjItem $query) {\n                if (Auth::user()->id != 1) {\n                    return $query->where('branch_id', Auth::user()->branch_id);\n                } else {\n                    return $query;\n                };\n            });\n    }\n\n    public static function getRelations(): array\n    {\n        return [\n            //\n        ];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListAdjItems::route('/'),\n            'create' => Pages\\CreateAdjItem::route('/create'),\n            'view' => Pages\\ViewAdjItem::route('/{record}'),\n            'edit' => Pages\\EditAdjItem::route('/{record}/edit'),\n        ];\n    }\n}\n"
        }
    ]
}