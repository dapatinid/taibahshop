{
    "sourceFile": "app/Filament/Resources/TrStkOutResource.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1731263659535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733248067590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,8 +76,9 @@\n \n                         Select::make('from_branch_id')\n                             ->label('From')\n                             ->relationship('branch', 'name')\n+                            ->formatStateUsing(fn(string $state): string => Auth::user()->brand_id)\n                             ->searchable()\n                             ->preload()\n                             ->required()\n                             ->columnSpan(4),\n"
                },
                {
                    "date": 1733248093995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,14 +73,12 @@\n                             ->default('TRO' . date('YmdHis')) ## Jika ingin menggunakan OrderID otomatis\n                             ->readOnly()\n                             ->columnSpan(4),\n \n-                        Select::make('from_branch_id')\n+                            TextInput::make('from_branch_id')\n                             ->label('From')\n                             ->relationship('branch', 'name')\n                             ->formatStateUsing(fn(string $state): string => Auth::user()->brand_id)\n-                            ->searchable()\n-                            ->preload()\n                             ->required()\n                             ->columnSpan(4),\n \n                         Select::make('to_branch_id')\n"
                },
                {
                    "date": 1733248099429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,8 @@\n                             ->columnSpan(4),\n \n                         TextInput::make('from_branch_id')\n                             ->label('From')\n-                            ->relationship('branch', 'name')\n                             ->formatStateUsing(fn(string $state): string => Auth::user()->brand_id)\n                             ->required()\n                             ->columnSpan(4),\n \n"
                },
                {
                    "date": 1733248132060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n                             ->columnSpan(4),\n \n                         TextInput::make('from_branch_id')\n                             ->label('From')\n-                            ->formatStateUsing(fn(string $state): string => Auth::user()->brand_id)\n+                            ->stateUsing(fn(string $state): string => Auth::user()->brand_id)\n                             ->required()\n                             ->columnSpan(4),\n \n                         Select::make('to_branch_id')\n"
                }
            ],
            "date": 1731263659535,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Filament\\Resources;\n\nuse App\\Filament\\Resources\\TrStkOutResource\\Pages;\nuse App\\Filament\\Resources\\TrStkOutResource\\RelationManagers;\nuse App\\Models\\Branch;\nuse App\\Models\\OrderItem;\nuse App\\Models\\Product;\nuse App\\Models\\TrStkOut;\nuse App\\Models\\User;\nuse Filament\\Forms;\nuse Filament\\Forms\\Components\\Actions\\Action;\nuse Filament\\Forms\\Components\\DateTimePicker;\nuse Filament\\Forms\\Components\\Group;\nuse Filament\\Forms\\Components\\Hidden;\nuse Filament\\Forms\\Components\\Placeholder;\nuse Filament\\Forms\\Components\\Repeater;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Textarea;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Forms\\Components\\ToggleButtons;\nuse Filament\\Forms\\Form;\nuse Filament\\Forms\\Get;\nuse Filament\\Forms\\Set;\nuse Filament\\Resources\\Resource;\nuse Filament\\Tables;\nuse Filament\\Tables\\Actions\\DeleteBulkAction;\nuse Filament\\Tables\\Columns\\SelectColumn;\nuse Filament\\Tables\\Columns\\Summarizers\\Sum;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Tables\\Table;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Database\\Eloquent\\Collection;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\SoftDeletingScope;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Number;\n\nclass TrStkOutResource extends Resource\n{\n    protected static ?string $model = TrStkOut::class;\n    protected static ?string $label = 'Transfer Out';\n    protected static ?string $navigationGroup = 'Branch';\n    protected static ?int $navigationSort = 14;\n\n    protected static ?string $navigationIcon = 'heroicon-o-arrow-up-tray';\n\n    public static function form(Form $form): Form\n    {\n        return $form\n            ->schema([\n\n                Group::make()->schema([\n                    Section::make('Tr. Information')->schema([\n\n                        Hidden::make('branch_id')\n                            ->default(fn() => Auth::user()->branch_id)\n                            ->required(),\n\n                        Hidden::make('created_by')\n                            ->default(fn() => Auth::user()->id) ## keperluan untuk memilih user setelah ada auth\n                            // ->disabledOn('edit')\n                            ->required(),\n\n                        Hidden::make('updated_by')\n                            ->default(fn() => Auth::user()->id) ## keperluan untuk memilih user setelah ada auth\n                            ->required(),\n\n                        TextInput::make('code_tr')\n                            ->label('No. Transsaction')\n                            ->default('TRO' . date('YmdHis')) ## Jika ingin menggunakan OrderID otomatis\n                            ->readOnly()\n                            ->columnSpan(4),\n\n                        Select::make('from_branch_id')\n                            ->label('From')\n                            ->relationship('branch', 'name')\n                            ->searchable()\n                            ->preload()\n                            ->required()\n                            ->columnSpan(4),\n\n                        Select::make('to_branch_id')\n                            ->label('To')\n                            ->relationship('branch', 'name')\n                            ->searchable()\n                            ->preload()\n                            ->required()\n                            ->columnSpan(4),\n\n                        DateTimePicker::make('date_order')\n                            ->label('Date Tr.')\n                            ->default(now())\n                            ->required()\n                            ->readOnly()\n                            ->columnSpan(4),\n\n                        Hidden::make('user_id')\n                            ->label('User')\n                            ->required()\n                            ->default(fn() => Auth::user()->id),\n\n                        Select::make('currency')\n                            ->default('idr')\n                            ->required()\n                            ->options([\n                                'idr' => 'IDR',\n                                'usd' => 'USD',\n                                'eur' => 'EUR'\n                            ])\n                            ->columnSpan(4),\n\n                        ToggleButtons::make('status')\n                            ->inline()\n                            ->default('new')\n                            ->required()\n                            ->columnSpan(6)\n                            ->options([\n                                'new' => 'New',\n                                'transfering' => 'Transfering',\n                                'done' => 'Done'\n                            ])\n                            ->colors([\n                                'new' => 'info',\n                                'transfering' => 'warning',\n                                'done' => 'success'\n                            ])\n                            ->icons([\n                                'new' => 'heroicon-m-sparkles',\n                                'transfering' => 'heroicon-m-arrow-path',\n                                'done' => 'heroicon-m-check-badge'\n                            ]),\n\n                        Textarea::make('notes')\n                            ->autosize()\n                            ->columnSpan(6)\n                    ])->columns(['sm' => 12, 'md' => 12, 'lg' => 12, 'xl' => 12]),\n\n                    Section::make('Tr. Items')->schema([\n                        Repeater::make('items')\n                            ->relationship()\n                            ->reorderable()\n                            ->schema([\n\n                                Select::make('product_id')\n                                    ->relationship(\n                                        name: 'product',\n                                        modifyQueryUsing: fn(Builder $query) => $query->orderBy('name')->orderBy('variant')->where('branch_id', Auth::user()->branch_id),\n                                    )\n                                    ->getOptionLabelFromRecordUsing(fn(Model $record) => \"{$record->name} {$record->variant}\")\n                                    ->searchable(['name', 'variant'])\n                                    ->preload()\n                                    ->required()\n                                    ->live()\n                                    ->distinct()\n                                    ->disableOptionsWhenSelectedInSiblingRepeaterItems()\n                                    ->reactive()\n                                    ->afterStateUpdated(fn($state, Set $set) => $set('p_unit_amount', Product::find($state)?->cogs ?? 0))\n                                    ->afterStateUpdated(fn($state, Set $set, Get $get) => $set('p_total_amount', Product::find($state)?->cogs * $get('quantity') ?? 0))\n\n                                    ->afterStateUpdated(function (Get $get, Set $set) {\n                                        $boughtqty = OrderItem::query()->where('product_id', $get('product_id'))->sum('p_quantity');\n                                        $soldqty = OrderItem::query()->where('product_id', $get('product_id'))->sum('quantity');\n                                        $set('stock_before', $boughtqty - $soldqty);\n                                    })\n                                    ->afterStateUpdated(function (Get $get, Set $set) {\n                                        $boughtqty = OrderItem::query()->where('product_id', $get('product_id'))->sum('p_quantity');\n                                        $soldqty = OrderItem::query()->where('product_id', $get('product_id'))->sum('quantity');\n                                        $set('stock_after', $boughtqty - $soldqty - $get('quantity'));\n                                    })\n\n\n                                    ->columnSpan(['sm' => 5, 'md' => 5, 'lg' => 5, 'xl' => 5]),\n\n                                TextInput::make('stock_before')\n                                    ->label('Stock Before')\n                                    ->disabled()\n                                    ->dehydrated()\n                                    ->columnSpan(['sm' => 2, 'md' => 2, 'lg' => 2, 'xl' => 2]),\n\n                                TextInput::make('stock_after')\n                                    ->label('Stock After')\n                                    ->disabled()\n                                    ->dehydrated()\n                                    ->columnSpan(['sm' => 2, 'md' => 2, 'lg' => 2, 'xl' => 2]),\n\n                                Select::make('branch_id')\n                                    ->default(fn() => Auth::user()->branch_id)\n                                    ->relationship(\n                                        name: 'branch',\n                                        modifyQueryUsing: fn(Builder $query) => $query->orderBy('name')->where('is_active', 1),\n                                    )\n                                    ->getOptionLabelFromRecordUsing(fn(Model $record) => \"{$record->name}\")\n                                    ->disabled()\n                                    ->dehydrated()\n                                    ->columnSpan(['sm' => 3, 'md' => 3, 'lg' => 3, 'xl' => 3]),\n\n                                TextInput::make('quantity')\n                                    ->label('Qty Out')\n                                    ->default(0)\n                                    ->numeric()\n                                    ->required()\n                                    ->minValue(0)\n                                    ->live(onBlur: true)\n                                    ->afterStateUpdated(function ($state, Get $get, Set $set) {\n                                        $stbefore = $get('stock_before');\n                                        $value = $state - $stbefore;\n                                        if ($value < $stbefore) {\n                                            $set('stock_after', $stbefore - $state);\n                                        } else {\n                                            $set('stock_after', $stbefore + $state);\n                                        }\n                                    })\n                                    ->afterStateHydrated(fn($state, Set $set, Get $get) => $set('p_total_amount', $state * $get('p_unit_amount')))\n                                    ->columnSpan(['sm' => 4, 'md' => 4, 'lg' => 4, 'xl' => 4]),\n\n                                TextInput::make('p_unit_amount')\n                                    ->label('Amount Out')\n                                    ->readOnly()\n                                    ->required()\n                                    ->dehydrated()\n                                    ->numeric()\n                                    ->live(onBlur: true)\n                                    ->afterStateUpdated(fn($state, Set $set, Get $get) => $set('p_total_amount', $state * $get('quantity')))\n                                    ->columnSpan(['sm' => 4, 'md' => 4, 'lg' => 4, 'xl' => 4]),\n\n                                TextInput::make('p_total_amount')\n                                    ->label('T.Amount Out')\n                                    ->required()\n                                    ->readOnly()\n                                    ->numeric()\n                                    ->placeholder(function (Set $set, Get $get) {\n                                        $stbefore = $get('stock_before');\n                                        $stafter = $get('stock_after');\n                                        $value = $stafter - $stbefore;\n                                        if ($value < 0) {\n                                            $set('p_total_amount', $value * -1 * $get('p_unit_amount'));\n                                        } else {\n                                            $set('p_total_amount', 0);\n                                        }\n                                    })\n                                    ->columnSpan(['sm' => 4, 'md' => 4, 'lg' => 4, 'xl' => 4]),\n\n                                TextInput::make('notes')\n                                    ->label('Description')\n                                    ->columnSpan(['sm' => 12, 'md' => 12, 'lg' => 12, 'xl' => 12]),\n\n                                Hidden::make('mutation_type')\n                                    ->default('Transfer Out'),\n\n                            ])\n                            ->columns(['sm' => 12, 'md' => 12, 'lg' => 12, 'xl' => 12])\n                            ->extraItemActions([\n                                Action::make('openProduct')\n                                    ->tooltip('Open product')\n                                    ->icon('heroicon-m-arrow-top-right-on-square')\n                                    ->url(function (array $arguments, Repeater $component): ?string {\n                                        $itemData = $component->getRawItemState($arguments['item']);\n\n                                        $product = Product::find($itemData['product_id']);\n\n                                        if (! $product) {\n                                            return null;\n                                        }\n\n                                        return ProductResource::getUrl('edit', ['record' => $product]);\n                                    }, shouldOpenInNewTab: true)\n                                    ->hidden(fn(array $arguments, Repeater $component): bool => blank($component->getRawItemState($arguments['item'])['product_id'])),\n                            ]),\n\n                        Group::make()->schema([\n\n                            Placeholder::make('grand_total_placeholder')\n                                ->label('Grand Total')\n                                ->content(function (Get $get, Set $set) {\n\n                                    $total = 0;\n                                    if (!$repeaters = $get('items')) {\n                                        return $total;\n                                    }\n                                    foreach ($repeaters as $key => $repeater) {\n                                        $total += $get(\"items.{$key}.p_total_amount\");\n                                    }\n\n                                    $grandTotal = $total;\n                                    $set('grand_total', $grandTotal);\n                                    return Number::currency($grandTotal, 'IDR');\n                                }),\n\n                            Hidden::make('grand_total')\n                                ->default(0)\n\n                        ])->columns(['sm' => 3, 'md' => 3, 'lg' => 3, 'xl' => 3])\n                    ])\n                ])->columnSpanFull()\n            ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->modifyQueryUsing(function (Builder $query) {\n                return $query->addSelect([\n                    'from_branch' => Branch::query()->select('name')\n                        ->whereColumn('id', 'from_branch_id'),\n                    'to_branch' => Branch::query()->select('name')\n                        ->whereColumn('id', 'to_branch_id'),\n                    'created' => User::query()->select('name')\n                        ->whereColumn('id', 'created_by'),\n                    'updated' => User::query()->select('name')\n                        ->whereColumn('id', 'updated_by'),\n                ]);\n            })\n            ->columns([\n\n                TextColumn::make('code_tr')\n                    ->label('Code')\n                    ->sortable()\n                    ->searchable(),\n                TextColumn::make('from_branch')\n                    ->label('From')\n                    ->sortable()\n                    ->searchable(),\n                TextColumn::make('to_branch')\n                    ->label('To')\n                    ->sortable()\n                    ->searchable(),\n\n                TextColumn::make('user.name')\n                    ->label('User')\n                    ->sortable()\n                    ->searchable(),\n                // ->searchable(isIndividual:true),\n\n                TextColumn::make('grand_total')\n                    ->numeric(locale: 'nl')->prefix('Rp ')\n                    ->sortable()\n                    ->alignRight()\n                    ->summarize(Sum::make()->numeric(locale: 'nl')->prefix('Rp ')->label('Total')),\n\n                SelectColumn::make('status')\n                    ->options([\n                        'new' => 'New',\n                        'transfering' => 'Transfering',\n                        'done' => 'Done'\n                    ])\n                    ->searchable()\n                    ->sortable()\n                    ->selectablePlaceholder(false),\n\n                TextColumn::make('date_order')\n                    ->dateTime()\n                    ->sortable()\n                    ->toggleable(isToggledHiddenByDefault: true),\n\n                TextColumn::make('created_at')\n                    ->dateTime()\n                    ->sortable()\n                    ->toggleable(isToggledHiddenByDefault: true),\n\n                TextColumn::make('updated_at')\n                    ->dateTime()\n                    ->sortable()\n                    ->toggleable(isToggledHiddenByDefault: true),\n\n                TextColumn::make('created')\n                    ->label('Created by')\n                    ->sortable()\n                    ->toggleable(isToggledHiddenByDefault: true),\n\n                TextColumn::make('updated')\n                    ->label('Updated by')\n                    ->sortable()\n                    ->toggleable(isToggledHiddenByDefault: true)\n            ])->defaultSort('created_at', 'desc')\n\n            ->filters([\n                //\n            ])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\BulkAction::make(name: 'Status')\n                        ->requiresConfirmation()\n                        ->deselectRecordsAfterCompletion()\n                        ->color('warning')\n                        ->icon('heroicon-o-flag')\n                        ->action(function (Collection $records, array $data): void {\n                            foreach ($records as $record) {\n                                $record->status = $data['status'];\n                                $record->save();\n                            }\n                        })\n                        ->form([\n                            Select::make('status')\n                                ->label('Status')\n                                ->options([\n                                    'new' => 'New',\n                                    'transfering' => 'Transfering',\n                                    'done' => 'Done'\n                                ])\n                                ->required(),\n                        ]),\n                    DeleteBulkAction::make(),\n                ]),\n            ])\n            ->query(function (TrStkOut $query) {\n                if (Auth::user()->id != 1) {\n                    return $query->where('branch_id', Auth::user()->branch_id);\n                } else {\n                    return $query;\n                };\n            });\n    }\n\n    public static function getRelations(): array\n    {\n        return [\n            //\n        ];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListTrStkOuts::route('/'),\n            'create' => Pages\\CreateTrStkOut::route('/create'),\n            'edit' => Pages\\EditTrStkOut::route('/{record}/edit'),\n        ];\n    }\n}\n"
        }
    ]
}