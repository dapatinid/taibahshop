{
    "sourceFile": "app/Filament/Resources/ProductionResource.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1734018922630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734018946578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,254 @@\n     public static function form(Form $form): Form\n     {\n         return $form\n             ->schema([\n-                //\n+                Group::make()->schema([\n+                    Section::make('Tr. Information')->schema([\n+\n+                        Hidden::make('branch_id')\n+                            ->default(fn() => Auth::user()->branch_id)\n+                            ->required(),\n+\n+                        Hidden::make('created_by')\n+                            ->default(fn() => Auth::user()->id) ## keperluan untuk memilih user setelah ada auth\n+                            // ->disabledOn('edit')\n+                            ->required(),\n+\n+                        Hidden::make('updated_by')\n+                            ->default(fn() => Auth::user()->id) ## keperluan untuk memilih user setelah ada auth\n+                            ->required(),\n+\n+                        TextInput::make('code_tr')\n+                            ->label('No. Transsaction')\n+                            ->default('TRO' . date('YmdHis') . '-' . Auth::user()->id) ## Jika ingin menggunakan OrderID otomatis\n+                            ->readOnly()\n+                            ->columnSpan(4),\n+\n+                        Select::make('from_branch_id')\n+                            ->label('From')\n+                            ->disabled()\n+                            ->dehydrated()\n+                            ->relationship('branch', 'name')\n+                            ->default(Auth::user()->branch_id)\n+                            ->searchable()\n+                            ->preload()\n+                            ->required()\n+                            ->columnSpan(4),\n+\n+                        Select::make('to_branch_id')\n+                            ->label('To')\n+                            ->relationship('branch', 'name')\n+                            ->searchable()\n+                            ->preload()\n+                            ->required()\n+                            ->columnSpan(4),\n+\n+                        DateTimePicker::make('date_order')\n+                            ->label('Date Tr.')\n+                            ->default(now())\n+                            ->required()\n+                            ->readOnly()\n+                            ->columnSpan(4),\n+\n+                        Hidden::make('user_id')\n+                            ->label('User')\n+                            ->required()\n+                            ->default(fn() => Auth::user()->id),\n+\n+                        Select::make('currency')\n+                            ->default('idr')\n+                            ->required()\n+                            ->options([\n+                                'idr' => 'IDR',\n+                                'usd' => 'USD',\n+                                'eur' => 'EUR'\n+                            ])\n+                            ->columnSpan(4),\n+\n+                        ToggleButtons::make('status')\n+                            ->inline()\n+                            ->default('new')\n+                            ->required()\n+                            ->columnSpan(6)\n+                            ->options([\n+                                'new' => 'New',\n+                                'transfering' => 'Transfering',\n+                                'done' => 'Done'\n+                            ])\n+                            ->colors([\n+                                'new' => 'info',\n+                                'transfering' => 'warning',\n+                                'done' => 'success'\n+                            ])\n+                            ->icons([\n+                                'new' => 'heroicon-m-sparkles',\n+                                'transfering' => 'heroicon-m-arrow-path',\n+                                'done' => 'heroicon-m-check-badge'\n+                            ]),\n+\n+                        Textarea::make('notes')\n+                            ->autosize()\n+                            ->columnSpan(6)\n+                    ])->columns(['sm' => 12, 'md' => 12, 'lg' => 12, 'xl' => 12]),\n+\n+                    Section::make('Tr. Items')->schema([\n+                        Repeater::make('items')\n+                            ->relationship()\n+                            ->reorderable()\n+                            ->schema([\n+\n+                                Select::make('product_id')\n+                                    ->relationship(\n+                                        name: 'product',\n+                                        modifyQueryUsing: fn(Builder $query) => $query->orderBy('name')->orderBy('variant')->where('branch_id', Auth::user()->branch_id),\n+                                    )\n+                                    ->getOptionLabelFromRecordUsing(fn(Model $record) => \"{$record->name} {$record->variant}\")\n+                                    ->searchable(['name', 'variant'])\n+                                    ->preload()\n+                                    ->required()\n+                                    ->live()\n+                                    ->distinct()\n+                                    ->disableOptionsWhenSelectedInSiblingRepeaterItems()\n+                                    ->reactive()\n+                                    ->afterStateUpdated(fn($state, Set $set) => $set('p_unit_amount', Product::find($state)?->cogs ?? 0))\n+                                    ->afterStateUpdated(fn($state, Set $set, Get $get) => $set('p_total_amount', Product::find($state)?->cogs * $get('quantity') ?? 0))\n+\n+                                    ->afterStateUpdated(function (Get $get, Set $set) {\n+                                        $boughtqty = OrderItem::query()->where('product_id', $get('product_id'))->sum('p_quantity');\n+                                        $soldqty = OrderItem::query()->where('product_id', $get('product_id'))->sum('quantity');\n+                                        $set('stock_before', $boughtqty - $soldqty);\n+                                    })\n+                                    ->afterStateUpdated(function (Get $get, Set $set) {\n+                                        $boughtqty = OrderItem::query()->where('product_id', $get('product_id'))->sum('p_quantity');\n+                                        $soldqty = OrderItem::query()->where('product_id', $get('product_id'))->sum('quantity');\n+                                        $set('stock_after', $boughtqty - $soldqty - $get('quantity'));\n+                                    })\n+\n+\n+                                    ->columnSpan(['sm' => 5, 'md' => 5, 'lg' => 5, 'xl' => 5]),\n+\n+                                TextInput::make('stock_before')\n+                                    ->label('Stock Before')\n+                                    ->disabled()\n+                                    ->dehydrated()\n+                                    ->columnSpan(['sm' => 2, 'md' => 2, 'lg' => 2, 'xl' => 2]),\n+\n+                                TextInput::make('stock_after')\n+                                    ->label('Stock After')\n+                                    ->disabled()\n+                                    ->dehydrated()\n+                                    ->columnSpan(['sm' => 2, 'md' => 2, 'lg' => 2, 'xl' => 2]),\n+\n+                                Select::make('branch_id')\n+                                    ->default(fn() => Auth::user()->branch_id)\n+                                    ->relationship(\n+                                        name: 'branch',\n+                                        modifyQueryUsing: fn(Builder $query) => $query->orderBy('name')->where('is_active', 1),\n+                                    )\n+                                    ->getOptionLabelFromRecordUsing(fn(Model $record) => \"{$record->name}\")\n+                                    ->disabled()\n+                                    ->dehydrated()\n+                                    ->columnSpan(['sm' => 3, 'md' => 3, 'lg' => 3, 'xl' => 3]),\n+\n+                                TextInput::make('quantity')\n+                                    ->label('Qty Out')\n+                                    ->default(0)\n+                                    ->numeric()\n+                                    ->required()\n+                                    ->minValue(0)\n+                                    ->live(onBlur: true)\n+                                    ->afterStateUpdated(function ($state, Get $get, Set $set) {\n+                                        $stbefore = $get('stock_before');\n+                                        $value = $state - $stbefore;\n+                                        if ($value < $stbefore) {\n+                                            $set('stock_after', $stbefore - $state);\n+                                        } else {\n+                                            $set('stock_after', $stbefore + $state);\n+                                        }\n+                                    })\n+                                    ->afterStateHydrated(fn($state, Set $set, Get $get) => $set('p_total_amount', $state * $get('p_unit_amount')))\n+                                    ->columnSpan(['sm' => 4, 'md' => 4, 'lg' => 4, 'xl' => 4]),\n+\n+                                TextInput::make('p_unit_amount')\n+                                    ->label('Amount Out')\n+                                    ->readOnly()\n+                                    ->required()\n+                                    ->dehydrated()\n+                                    ->numeric()\n+                                    ->live(onBlur: true)\n+                                    ->afterStateUpdated(fn($state, Set $set, Get $get) => $set('p_total_amount', $state * $get('quantity')))\n+                                    ->columnSpan(['sm' => 4, 'md' => 4, 'lg' => 4, 'xl' => 4]),\n+\n+                                TextInput::make('p_total_amount')\n+                                    ->label('T.Amount Out')\n+                                    ->required()\n+                                    ->readOnly()\n+                                    ->numeric()\n+                                    ->placeholder(function (Set $set, Get $get) {\n+                                        $stbefore = $get('stock_before');\n+                                        $stafter = $get('stock_after');\n+                                        $value = $stafter - $stbefore;\n+                                        if ($value < 0) {\n+                                            $set('p_total_amount', $value * -1 * $get('p_unit_amount'));\n+                                        } else {\n+                                            $set('p_total_amount', 0);\n+                                        }\n+                                    })\n+                                    ->columnSpan(['sm' => 4, 'md' => 4, 'lg' => 4, 'xl' => 4]),\n+\n+                                TextInput::make('notes')\n+                                    ->label('Description')\n+                                    ->columnSpan(['sm' => 12, 'md' => 12, 'lg' => 12, 'xl' => 12]),\n+\n+                                Hidden::make('mutation_type')\n+                                    ->default('Transfer Out'),\n+\n+                            ])\n+                            ->columns(['sm' => 12, 'md' => 12, 'lg' => 12, 'xl' => 12])\n+                            ->extraItemActions([\n+                                Action::make('openProduct')\n+                                    ->tooltip('Open product')\n+                                    ->icon('heroicon-m-arrow-top-right-on-square')\n+                                    ->url(function (array $arguments, Repeater $component): ?string {\n+                                        $itemData = $component->getRawItemState($arguments['item']);\n+\n+                                        $product = Product::find($itemData['product_id']);\n+\n+                                        if (! $product) {\n+                                            return null;\n+                                        }\n+\n+                                        return ProductResource::getUrl('edit', ['record' => $product]);\n+                                    }, shouldOpenInNewTab: true)\n+                                    ->hidden(fn(array $arguments, Repeater $component): bool => blank($component->getRawItemState($arguments['item'])['product_id'])),\n+                            ]),\n+\n+                        Group::make()->schema([\n+\n+                            Placeholder::make('grand_total_placeholder')\n+                                ->label('Grand Total')\n+                                ->content(function (Get $get, Set $set) {\n+\n+                                    $total = 0;\n+                                    if (!$repeaters = $get('items')) {\n+                                        return $total;\n+                                    }\n+                                    foreach ($repeaters as $key => $repeater) {\n+                                        $total += $get(\"items.{$key}.p_total_amount\");\n+                                    }\n+\n+                                    $grandTotal = $total;\n+                                    $set('grand_total', $grandTotal);\n+                                    return Number::currency($grandTotal, 'IDR');\n+                                }),\n+\n+                            Hidden::make('grand_total')\n+                                ->default(0)\n+\n+                        ])->columns(['sm' => 3, 'md' => 3, 'lg' => 3, 'xl' => 3])\n+                    ])\n+                ])->columnSpanFull()\n             ]);\n     }\n \n     public static function table(Table $table): Table\n"
                },
                {
                    "date": 1734018971613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -247,9 +247,9 @@\n                                     ->label('Description')\n                                     ->columnSpan(['sm' => 12, 'md' => 12, 'lg' => 12, 'xl' => 12]),\n \n                                 Hidden::make('mutation_type')\n-                                    ->default('Transfer Out'),\n+                                    ->default('Production'),\n \n                             ])\n                             ->columns(['sm' => 12, 'md' => 12, 'lg' => 12, 'xl' => 12])\n                             ->extraItemActions([\n"
                },
                {
                    "date": 1734019145849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,23 @@\n <?php\n \n namespace App\\Filament\\Resources;\n \n+use App\\Filament\\Resources\\ProductionResource\\Pages;\n+use App\\Filament\\Resources\\ProductionResource\\RelationManagers;\n use App\\Models\\Production;\n-use App\\Filament\\Resources\\TrStkOutResource\\Pages;\n-use App\\Filament\\Resources\\TrStkOutResource\\RelationManagers;\n+use Filament\\Forms;\n+use Filament\\Forms\\Form;\n+use Filament\\Resources\\Resource;\n+use Filament\\Tables;\n+use Filament\\Tables\\Table;\n+use Illuminate\\Database\\Eloquent\\Builder;\n+use Illuminate\\Database\\Eloquent\\SoftDeletingScope;\n use App\\Models\\Branch;\n use App\\Models\\OrderItem;\n use App\\Models\\Product;\n use App\\Models\\TrStkOut;\n use App\\Models\\User;\n-use Filament\\Forms;\n use Filament\\Forms\\Components\\Actions\\Action;\n use Filament\\Forms\\Components\\DateTimePicker;\n use Filament\\Forms\\Components\\Group;\n use Filament\\Forms\\Components\\Hidden;\n@@ -21,22 +27,16 @@\n use Filament\\Forms\\Components\\Select;\n use Filament\\Forms\\Components\\Textarea;\n use Filament\\Forms\\Components\\TextInput;\n use Filament\\Forms\\Components\\ToggleButtons;\n-use Filament\\Forms\\Form;\n use Filament\\Forms\\Get;\n use Filament\\Forms\\Set;\n-use Filament\\Resources\\Resource;\n-use Filament\\Tables;\n use Filament\\Tables\\Actions\\DeleteBulkAction;\n use Filament\\Tables\\Columns\\SelectColumn;\n use Filament\\Tables\\Columns\\Summarizers\\Sum;\n use Filament\\Tables\\Columns\\TextColumn;\n-use Filament\\Tables\\Table;\n-use Illuminate\\Database\\Eloquent\\Builder;\n use Illuminate\\Database\\Eloquent\\Collection;\n use Illuminate\\Database\\Eloquent\\Model;\n-use Illuminate\\Database\\Eloquent\\SoftDeletingScope;\n use Illuminate\\Support\\Facades\\Auth;\n use Illuminate\\Support\\Number;\n \n class ProductionResource extends Resource\n@@ -48,254 +48,9 @@\n     public static function form(Form $form): Form\n     {\n         return $form\n             ->schema([\n-                Group::make()->schema([\n-                    Section::make('Tr. Information')->schema([\n-\n-                        Hidden::make('branch_id')\n-                            ->default(fn() => Auth::user()->branch_id)\n-                            ->required(),\n-\n-                        Hidden::make('created_by')\n-                            ->default(fn() => Auth::user()->id) ## keperluan untuk memilih user setelah ada auth\n-                            // ->disabledOn('edit')\n-                            ->required(),\n-\n-                        Hidden::make('updated_by')\n-                            ->default(fn() => Auth::user()->id) ## keperluan untuk memilih user setelah ada auth\n-                            ->required(),\n-\n-                        TextInput::make('code_tr')\n-                            ->label('No. Transsaction')\n-                            ->default('TRO' . date('YmdHis') . '-' . Auth::user()->id) ## Jika ingin menggunakan OrderID otomatis\n-                            ->readOnly()\n-                            ->columnSpan(4),\n-\n-                        Select::make('from_branch_id')\n-                            ->label('From')\n-                            ->disabled()\n-                            ->dehydrated()\n-                            ->relationship('branch', 'name')\n-                            ->default(Auth::user()->branch_id)\n-                            ->searchable()\n-                            ->preload()\n-                            ->required()\n-                            ->columnSpan(4),\n-\n-                        Select::make('to_branch_id')\n-                            ->label('To')\n-                            ->relationship('branch', 'name')\n-                            ->searchable()\n-                            ->preload()\n-                            ->required()\n-                            ->columnSpan(4),\n-\n-                        DateTimePicker::make('date_order')\n-                            ->label('Date Tr.')\n-                            ->default(now())\n-                            ->required()\n-                            ->readOnly()\n-                            ->columnSpan(4),\n-\n-                        Hidden::make('user_id')\n-                            ->label('User')\n-                            ->required()\n-                            ->default(fn() => Auth::user()->id),\n-\n-                        Select::make('currency')\n-                            ->default('idr')\n-                            ->required()\n-                            ->options([\n-                                'idr' => 'IDR',\n-                                'usd' => 'USD',\n-                                'eur' => 'EUR'\n-                            ])\n-                            ->columnSpan(4),\n-\n-                        ToggleButtons::make('status')\n-                            ->inline()\n-                            ->default('new')\n-                            ->required()\n-                            ->columnSpan(6)\n-                            ->options([\n-                                'new' => 'New',\n-                                'transfering' => 'Transfering',\n-                                'done' => 'Done'\n-                            ])\n-                            ->colors([\n-                                'new' => 'info',\n-                                'transfering' => 'warning',\n-                                'done' => 'success'\n-                            ])\n-                            ->icons([\n-                                'new' => 'heroicon-m-sparkles',\n-                                'transfering' => 'heroicon-m-arrow-path',\n-                                'done' => 'heroicon-m-check-badge'\n-                            ]),\n-\n-                        Textarea::make('notes')\n-                            ->autosize()\n-                            ->columnSpan(6)\n-                    ])->columns(['sm' => 12, 'md' => 12, 'lg' => 12, 'xl' => 12]),\n-\n-                    Section::make('Tr. Items')->schema([\n-                        Repeater::make('items')\n-                            ->relationship()\n-                            ->reorderable()\n-                            ->schema([\n-\n-                                Select::make('product_id')\n-                                    ->relationship(\n-                                        name: 'product',\n-                                        modifyQueryUsing: fn(Builder $query) => $query->orderBy('name')->orderBy('variant')->where('branch_id', Auth::user()->branch_id),\n-                                    )\n-                                    ->getOptionLabelFromRecordUsing(fn(Model $record) => \"{$record->name} {$record->variant}\")\n-                                    ->searchable(['name', 'variant'])\n-                                    ->preload()\n-                                    ->required()\n-                                    ->live()\n-                                    ->distinct()\n-                                    ->disableOptionsWhenSelectedInSiblingRepeaterItems()\n-                                    ->reactive()\n-                                    ->afterStateUpdated(fn($state, Set $set) => $set('p_unit_amount', Product::find($state)?->cogs ?? 0))\n-                                    ->afterStateUpdated(fn($state, Set $set, Get $get) => $set('p_total_amount', Product::find($state)?->cogs * $get('quantity') ?? 0))\n-\n-                                    ->afterStateUpdated(function (Get $get, Set $set) {\n-                                        $boughtqty = OrderItem::query()->where('product_id', $get('product_id'))->sum('p_quantity');\n-                                        $soldqty = OrderItem::query()->where('product_id', $get('product_id'))->sum('quantity');\n-                                        $set('stock_before', $boughtqty - $soldqty);\n-                                    })\n-                                    ->afterStateUpdated(function (Get $get, Set $set) {\n-                                        $boughtqty = OrderItem::query()->where('product_id', $get('product_id'))->sum('p_quantity');\n-                                        $soldqty = OrderItem::query()->where('product_id', $get('product_id'))->sum('quantity');\n-                                        $set('stock_after', $boughtqty - $soldqty - $get('quantity'));\n-                                    })\n-\n-\n-                                    ->columnSpan(['sm' => 5, 'md' => 5, 'lg' => 5, 'xl' => 5]),\n-\n-                                TextInput::make('stock_before')\n-                                    ->label('Stock Before')\n-                                    ->disabled()\n-                                    ->dehydrated()\n-                                    ->columnSpan(['sm' => 2, 'md' => 2, 'lg' => 2, 'xl' => 2]),\n-\n-                                TextInput::make('stock_after')\n-                                    ->label('Stock After')\n-                                    ->disabled()\n-                                    ->dehydrated()\n-                                    ->columnSpan(['sm' => 2, 'md' => 2, 'lg' => 2, 'xl' => 2]),\n-\n-                                Select::make('branch_id')\n-                                    ->default(fn() => Auth::user()->branch_id)\n-                                    ->relationship(\n-                                        name: 'branch',\n-                                        modifyQueryUsing: fn(Builder $query) => $query->orderBy('name')->where('is_active', 1),\n-                                    )\n-                                    ->getOptionLabelFromRecordUsing(fn(Model $record) => \"{$record->name}\")\n-                                    ->disabled()\n-                                    ->dehydrated()\n-                                    ->columnSpan(['sm' => 3, 'md' => 3, 'lg' => 3, 'xl' => 3]),\n-\n-                                TextInput::make('quantity')\n-                                    ->label('Qty Out')\n-                                    ->default(0)\n-                                    ->numeric()\n-                                    ->required()\n-                                    ->minValue(0)\n-                                    ->live(onBlur: true)\n-                                    ->afterStateUpdated(function ($state, Get $get, Set $set) {\n-                                        $stbefore = $get('stock_before');\n-                                        $value = $state - $stbefore;\n-                                        if ($value < $stbefore) {\n-                                            $set('stock_after', $stbefore - $state);\n-                                        } else {\n-                                            $set('stock_after', $stbefore + $state);\n-                                        }\n-                                    })\n-                                    ->afterStateHydrated(fn($state, Set $set, Get $get) => $set('p_total_amount', $state * $get('p_unit_amount')))\n-                                    ->columnSpan(['sm' => 4, 'md' => 4, 'lg' => 4, 'xl' => 4]),\n-\n-                                TextInput::make('p_unit_amount')\n-                                    ->label('Amount Out')\n-                                    ->readOnly()\n-                                    ->required()\n-                                    ->dehydrated()\n-                                    ->numeric()\n-                                    ->live(onBlur: true)\n-                                    ->afterStateUpdated(fn($state, Set $set, Get $get) => $set('p_total_amount', $state * $get('quantity')))\n-                                    ->columnSpan(['sm' => 4, 'md' => 4, 'lg' => 4, 'xl' => 4]),\n-\n-                                TextInput::make('p_total_amount')\n-                                    ->label('T.Amount Out')\n-                                    ->required()\n-                                    ->readOnly()\n-                                    ->numeric()\n-                                    ->placeholder(function (Set $set, Get $get) {\n-                                        $stbefore = $get('stock_before');\n-                                        $stafter = $get('stock_after');\n-                                        $value = $stafter - $stbefore;\n-                                        if ($value < 0) {\n-                                            $set('p_total_amount', $value * -1 * $get('p_unit_amount'));\n-                                        } else {\n-                                            $set('p_total_amount', 0);\n-                                        }\n-                                    })\n-                                    ->columnSpan(['sm' => 4, 'md' => 4, 'lg' => 4, 'xl' => 4]),\n-\n-                                TextInput::make('notes')\n-                                    ->label('Description')\n-                                    ->columnSpan(['sm' => 12, 'md' => 12, 'lg' => 12, 'xl' => 12]),\n-\n-                                Hidden::make('mutation_type')\n-                                    ->default('Production'),\n-\n-                            ])\n-                            ->columns(['sm' => 12, 'md' => 12, 'lg' => 12, 'xl' => 12])\n-                            ->extraItemActions([\n-                                Action::make('openProduct')\n-                                    ->tooltip('Open product')\n-                                    ->icon('heroicon-m-arrow-top-right-on-square')\n-                                    ->url(function (array $arguments, Repeater $component): ?string {\n-                                        $itemData = $component->getRawItemState($arguments['item']);\n-\n-                                        $product = Product::find($itemData['product_id']);\n-\n-                                        if (! $product) {\n-                                            return null;\n-                                        }\n-\n-                                        return ProductResource::getUrl('edit', ['record' => $product]);\n-                                    }, shouldOpenInNewTab: true)\n-                                    ->hidden(fn(array $arguments, Repeater $component): bool => blank($component->getRawItemState($arguments['item'])['product_id'])),\n-                            ]),\n-\n-                        Group::make()->schema([\n-\n-                            Placeholder::make('grand_total_placeholder')\n-                                ->label('Grand Total')\n-                                ->content(function (Get $get, Set $set) {\n-\n-                                    $total = 0;\n-                                    if (!$repeaters = $get('items')) {\n-                                        return $total;\n-                                    }\n-                                    foreach ($repeaters as $key => $repeater) {\n-                                        $total += $get(\"items.{$key}.p_total_amount\");\n-                                    }\n-\n-                                    $grandTotal = $total;\n-                                    $set('grand_total', $grandTotal);\n-                                    return Number::currency($grandTotal, 'IDR');\n-                                }),\n-\n-                            Hidden::make('grand_total')\n-                                ->default(0)\n-\n-                        ])->columns(['sm' => 3, 'md' => 3, 'lg' => 3, 'xl' => 3])\n-                    ])\n-                ])->columnSpanFull()\n+                //\n             ]);\n     }\n \n     public static function table(Table $table): Table\n"
                },
                {
                    "date": 1734019173196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,254 @@\n     public static function form(Form $form): Form\n     {\n         return $form\n             ->schema([\n-                //\n+                Group::make()->schema([\n+                    Section::make('Tr. Information')->schema([\n+\n+                        Hidden::make('branch_id')\n+                            ->default(fn() => Auth::user()->branch_id)\n+                            ->required(),\n+\n+                        Hidden::make('created_by')\n+                            ->default(fn() => Auth::user()->id) ## keperluan untuk memilih user setelah ada auth\n+                            // ->disabledOn('edit')\n+                            ->required(),\n+\n+                        Hidden::make('updated_by')\n+                            ->default(fn() => Auth::user()->id) ## keperluan untuk memilih user setelah ada auth\n+                            ->required(),\n+\n+                        TextInput::make('code_tr')\n+                            ->label('No. Transsaction')\n+                            ->default('TRO' . date('YmdHis') . '-' . Auth::user()->id) ## Jika ingin menggunakan OrderID otomatis\n+                            ->readOnly()\n+                            ->columnSpan(4),\n+\n+                        Select::make('from_branch_id')\n+                            ->label('From')\n+                            ->disabled()\n+                            ->dehydrated()\n+                            ->relationship('branch', 'name')\n+                            ->default(Auth::user()->branch_id)\n+                            ->searchable()\n+                            ->preload()\n+                            ->required()\n+                            ->columnSpan(4),\n+\n+                        Select::make('to_branch_id')\n+                            ->label('To')\n+                            ->relationship('branch', 'name')\n+                            ->searchable()\n+                            ->preload()\n+                            ->required()\n+                            ->columnSpan(4),\n+\n+                        DateTimePicker::make('date_order')\n+                            ->label('Date Tr.')\n+                            ->default(now())\n+                            ->required()\n+                            ->readOnly()\n+                            ->columnSpan(4),\n+\n+                        Hidden::make('user_id')\n+                            ->label('User')\n+                            ->required()\n+                            ->default(fn() => Auth::user()->id),\n+\n+                        Select::make('currency')\n+                            ->default('idr')\n+                            ->required()\n+                            ->options([\n+                                'idr' => 'IDR',\n+                                'usd' => 'USD',\n+                                'eur' => 'EUR'\n+                            ])\n+                            ->columnSpan(4),\n+\n+                        ToggleButtons::make('status')\n+                            ->inline()\n+                            ->default('new')\n+                            ->required()\n+                            ->columnSpan(6)\n+                            ->options([\n+                                'new' => 'New',\n+                                'transfering' => 'Transfering',\n+                                'done' => 'Done'\n+                            ])\n+                            ->colors([\n+                                'new' => 'info',\n+                                'transfering' => 'warning',\n+                                'done' => 'success'\n+                            ])\n+                            ->icons([\n+                                'new' => 'heroicon-m-sparkles',\n+                                'transfering' => 'heroicon-m-arrow-path',\n+                                'done' => 'heroicon-m-check-badge'\n+                            ]),\n+\n+                        Textarea::make('notes')\n+                            ->autosize()\n+                            ->columnSpan(6)\n+                    ])->columns(['sm' => 12, 'md' => 12, 'lg' => 12, 'xl' => 12]),\n+\n+                    Section::make('Tr. Items')->schema([\n+                        Repeater::make('items')\n+                            ->relationship()\n+                            ->reorderable()\n+                            ->schema([\n+\n+                                Select::make('product_id')\n+                                    ->relationship(\n+                                        name: 'product',\n+                                        modifyQueryUsing: fn(Builder $query) => $query->orderBy('name')->orderBy('variant')->where('branch_id', Auth::user()->branch_id),\n+                                    )\n+                                    ->getOptionLabelFromRecordUsing(fn(Model $record) => \"{$record->name} {$record->variant}\")\n+                                    ->searchable(['name', 'variant'])\n+                                    ->preload()\n+                                    ->required()\n+                                    ->live()\n+                                    ->distinct()\n+                                    ->disableOptionsWhenSelectedInSiblingRepeaterItems()\n+                                    ->reactive()\n+                                    ->afterStateUpdated(fn($state, Set $set) => $set('p_unit_amount', Product::find($state)?->cogs ?? 0))\n+                                    ->afterStateUpdated(fn($state, Set $set, Get $get) => $set('p_total_amount', Product::find($state)?->cogs * $get('quantity') ?? 0))\n+\n+                                    ->afterStateUpdated(function (Get $get, Set $set) {\n+                                        $boughtqty = OrderItem::query()->where('product_id', $get('product_id'))->sum('p_quantity');\n+                                        $soldqty = OrderItem::query()->where('product_id', $get('product_id'))->sum('quantity');\n+                                        $set('stock_before', $boughtqty - $soldqty);\n+                                    })\n+                                    ->afterStateUpdated(function (Get $get, Set $set) {\n+                                        $boughtqty = OrderItem::query()->where('product_id', $get('product_id'))->sum('p_quantity');\n+                                        $soldqty = OrderItem::query()->where('product_id', $get('product_id'))->sum('quantity');\n+                                        $set('stock_after', $boughtqty - $soldqty - $get('quantity'));\n+                                    })\n+\n+\n+                                    ->columnSpan(['sm' => 5, 'md' => 5, 'lg' => 5, 'xl' => 5]),\n+\n+                                TextInput::make('stock_before')\n+                                    ->label('Stock Before')\n+                                    ->disabled()\n+                                    ->dehydrated()\n+                                    ->columnSpan(['sm' => 2, 'md' => 2, 'lg' => 2, 'xl' => 2]),\n+\n+                                TextInput::make('stock_after')\n+                                    ->label('Stock After')\n+                                    ->disabled()\n+                                    ->dehydrated()\n+                                    ->columnSpan(['sm' => 2, 'md' => 2, 'lg' => 2, 'xl' => 2]),\n+\n+                                Select::make('branch_id')\n+                                    ->default(fn() => Auth::user()->branch_id)\n+                                    ->relationship(\n+                                        name: 'branch',\n+                                        modifyQueryUsing: fn(Builder $query) => $query->orderBy('name')->where('is_active', 1),\n+                                    )\n+                                    ->getOptionLabelFromRecordUsing(fn(Model $record) => \"{$record->name}\")\n+                                    ->disabled()\n+                                    ->dehydrated()\n+                                    ->columnSpan(['sm' => 3, 'md' => 3, 'lg' => 3, 'xl' => 3]),\n+\n+                                TextInput::make('quantity')\n+                                    ->label('Qty Out')\n+                                    ->default(0)\n+                                    ->numeric()\n+                                    ->required()\n+                                    ->minValue(0)\n+                                    ->live(onBlur: true)\n+                                    ->afterStateUpdated(function ($state, Get $get, Set $set) {\n+                                        $stbefore = $get('stock_before');\n+                                        $value = $state - $stbefore;\n+                                        if ($value < $stbefore) {\n+                                            $set('stock_after', $stbefore - $state);\n+                                        } else {\n+                                            $set('stock_after', $stbefore + $state);\n+                                        }\n+                                    })\n+                                    ->afterStateHydrated(fn($state, Set $set, Get $get) => $set('p_total_amount', $state * $get('p_unit_amount')))\n+                                    ->columnSpan(['sm' => 4, 'md' => 4, 'lg' => 4, 'xl' => 4]),\n+\n+                                TextInput::make('p_unit_amount')\n+                                    ->label('Amount Out')\n+                                    ->readOnly()\n+                                    ->required()\n+                                    ->dehydrated()\n+                                    ->numeric()\n+                                    ->live(onBlur: true)\n+                                    ->afterStateUpdated(fn($state, Set $set, Get $get) => $set('p_total_amount', $state * $get('quantity')))\n+                                    ->columnSpan(['sm' => 4, 'md' => 4, 'lg' => 4, 'xl' => 4]),\n+\n+                                TextInput::make('p_total_amount')\n+                                    ->label('T.Amount Out')\n+                                    ->required()\n+                                    ->readOnly()\n+                                    ->numeric()\n+                                    ->placeholder(function (Set $set, Get $get) {\n+                                        $stbefore = $get('stock_before');\n+                                        $stafter = $get('stock_after');\n+                                        $value = $stafter - $stbefore;\n+                                        if ($value < 0) {\n+                                            $set('p_total_amount', $value * -1 * $get('p_unit_amount'));\n+                                        } else {\n+                                            $set('p_total_amount', 0);\n+                                        }\n+                                    })\n+                                    ->columnSpan(['sm' => 4, 'md' => 4, 'lg' => 4, 'xl' => 4]),\n+\n+                                TextInput::make('notes')\n+                                    ->label('Description')\n+                                    ->columnSpan(['sm' => 12, 'md' => 12, 'lg' => 12, 'xl' => 12]),\n+\n+                                Hidden::make('mutation_type')\n+                                    ->default('Production'),\n+\n+                            ])\n+                            ->columns(['sm' => 12, 'md' => 12, 'lg' => 12, 'xl' => 12])\n+                            ->extraItemActions([\n+                                Action::make('openProduct')\n+                                    ->tooltip('Open product')\n+                                    ->icon('heroicon-m-arrow-top-right-on-square')\n+                                    ->url(function (array $arguments, Repeater $component): ?string {\n+                                        $itemData = $component->getRawItemState($arguments['item']);\n+\n+                                        $product = Product::find($itemData['product_id']);\n+\n+                                        if (! $product) {\n+                                            return null;\n+                                        }\n+\n+                                        return ProductResource::getUrl('edit', ['record' => $product]);\n+                                    }, shouldOpenInNewTab: true)\n+                                    ->hidden(fn(array $arguments, Repeater $component): bool => blank($component->getRawItemState($arguments['item'])['product_id'])),\n+                            ]),\n+\n+                        Group::make()->schema([\n+\n+                            Placeholder::make('grand_total_placeholder')\n+                                ->label('Grand Total')\n+                                ->content(function (Get $get, Set $set) {\n+\n+                                    $total = 0;\n+                                    if (!$repeaters = $get('items')) {\n+                                        return $total;\n+                                    }\n+                                    foreach ($repeaters as $key => $repeater) {\n+                                        $total += $get(\"items.{$key}.p_total_amount\");\n+                                    }\n+\n+                                    $grandTotal = $total;\n+                                    $set('grand_total', $grandTotal);\n+                                    return Number::currency($grandTotal, 'IDR');\n+                                }),\n+\n+                            Hidden::make('grand_total')\n+                                ->default(0)\n+\n+                        ])->columns(['sm' => 3, 'md' => 3, 'lg' => 3, 'xl' => 3])\n+                    ])\n+                ])->columnSpanFull()\n             ]);\n     }\n \n     public static function table(Table $table): Table\n"
                },
                {
                    "date": 1734019192419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n class ProductionResource extends Resource\n {\n     protected static ?string $model = Production::class;\n \n-    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n+    protected static ?string $navigationIcon = 'heroicon-o-forward';\n \n     public static function form(Form $form): Form\n     {\n         return $form\n"
                },
                {
                    "date": 1734019262252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,10 @@\n {\n     protected static ?string $model = Production::class;\n \n     protected static ?string $navigationIcon = 'heroicon-o-forward';\n+    protected static ?string $navigationGroup = 'Product';\n+    protected static ?int $navigationSort = 4;\n \n     public static function form(Form $form): Form\n     {\n         return $form\n"
                },
                {
                    "date": 1734019311802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n     {\n         return $form\n             ->schema([\n                 Group::make()->schema([\n-                    Section::make('Tr. Information')->schema([\n+                    Section::make('Pro. Information')->schema([\n \n                         Hidden::make('branch_id')\n                             ->default(fn() => Auth::user()->branch_id)\n                             ->required(),\n@@ -68,9 +68,9 @@\n                             ->required(),\n \n                         TextInput::make('code_tr')\n                             ->label('No. Transsaction')\n-                            ->default('TRO' . date('YmdHis') . '-' . Auth::user()->id) ## Jika ingin menggunakan OrderID otomatis\n+                            ->default('PRO' . date('YmdHis') . '-' . Auth::user()->id) ## Jika ingin menggunakan OrderID otomatis\n                             ->readOnly()\n                             ->columnSpan(4),\n \n                         Select::make('from_branch_id')\n"
                },
                {
                    "date": 1734019371848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,10 +120,11 @@\n                             ->required()\n                             ->columnSpan(6)\n                             ->options([\n                                 'new' => 'New',\n-                                'transfering' => 'Transfering',\n-                                'done' => 'Done'\n+                                'processing' => 'Processing',\n+                                'done' => 'Done',\n+                        'canceled' => 'Canceled'\n                             ])\n                             ->colors([\n                                 'new' => 'info',\n                                 'transfering' => 'warning',\n"
                },
                {
                    "date": 1734019653317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,8 @@\n use Illuminate\\Database\\Eloquent\\SoftDeletingScope;\n use App\\Models\\Branch;\n use App\\Models\\OrderItem;\n use App\\Models\\Product;\n-use App\\Models\\TrStkOut;\n use App\\Models\\User;\n use Filament\\Forms\\Components\\Actions\\Action;\n use Filament\\Forms\\Components\\DateTimePicker;\n use Filament\\Forms\\Components\\Group;\n"
                },
                {
                    "date": 1734019789040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,9 @@\n                             ->autosize()\n                             ->columnSpan(6)\n                     ])->columns(['sm' => 12, 'md' => 12, 'lg' => 12, 'xl' => 12]),\n \n-                    Section::make('Tr. Items')->schema([\n+                    Section::make('Pro. Items')->schema([\n                         Repeater::make('items')\n                             ->relationship()\n                             ->reorderable()\n                             ->schema([\n"
                },
                {
                    "date": 1734019812067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,164 +139,9 @@\n                             ->autosize()\n                             ->columnSpan(6)\n                     ])->columns(['sm' => 12, 'md' => 12, 'lg' => 12, 'xl' => 12]),\n \n-                    Section::make('Pro. Items')->schema([\n-                        Repeater::make('items')\n-                            ->relationship()\n-                            ->reorderable()\n-                            ->schema([\n-\n-                                Select::make('product_id')\n-                                    ->relationship(\n-                                        name: 'product',\n-                                        modifyQueryUsing: fn(Builder $query) => $query->orderBy('name')->orderBy('variant')->where('branch_id', Auth::user()->branch_id),\n-                                    )\n-                                    ->getOptionLabelFromRecordUsing(fn(Model $record) => \"{$record->name} {$record->variant}\")\n-                                    ->searchable(['name', 'variant'])\n-                                    ->preload()\n-                                    ->required()\n-                                    ->live()\n-                                    ->distinct()\n-                                    ->disableOptionsWhenSelectedInSiblingRepeaterItems()\n-                                    ->reactive()\n-                                    ->afterStateUpdated(fn($state, Set $set) => $set('p_unit_amount', Product::find($state)?->cogs ?? 0))\n-                                    ->afterStateUpdated(fn($state, Set $set, Get $get) => $set('p_total_amount', Product::find($state)?->cogs * $get('quantity') ?? 0))\n-\n-                                    ->afterStateUpdated(function (Get $get, Set $set) {\n-                                        $boughtqty = OrderItem::query()->where('product_id', $get('product_id'))->sum('p_quantity');\n-                                        $soldqty = OrderItem::query()->where('product_id', $get('product_id'))->sum('quantity');\n-                                        $set('stock_before', $boughtqty - $soldqty);\n-                                    })\n-                                    ->afterStateUpdated(function (Get $get, Set $set) {\n-                                        $boughtqty = OrderItem::query()->where('product_id', $get('product_id'))->sum('p_quantity');\n-                                        $soldqty = OrderItem::query()->where('product_id', $get('product_id'))->sum('quantity');\n-                                        $set('stock_after', $boughtqty - $soldqty - $get('quantity'));\n-                                    })\n-\n-\n-                                    ->columnSpan(['sm' => 5, 'md' => 5, 'lg' => 5, 'xl' => 5]),\n-\n-                                TextInput::make('stock_before')\n-                                    ->label('Stock Before')\n-                                    ->disabled()\n-                                    ->dehydrated()\n-                                    ->columnSpan(['sm' => 2, 'md' => 2, 'lg' => 2, 'xl' => 2]),\n-\n-                                TextInput::make('stock_after')\n-                                    ->label('Stock After')\n-                                    ->disabled()\n-                                    ->dehydrated()\n-                                    ->columnSpan(['sm' => 2, 'md' => 2, 'lg' => 2, 'xl' => 2]),\n-\n-                                Select::make('branch_id')\n-                                    ->default(fn() => Auth::user()->branch_id)\n-                                    ->relationship(\n-                                        name: 'branch',\n-                                        modifyQueryUsing: fn(Builder $query) => $query->orderBy('name')->where('is_active', 1),\n-                                    )\n-                                    ->getOptionLabelFromRecordUsing(fn(Model $record) => \"{$record->name}\")\n-                                    ->disabled()\n-                                    ->dehydrated()\n-                                    ->columnSpan(['sm' => 3, 'md' => 3, 'lg' => 3, 'xl' => 3]),\n-\n-                                TextInput::make('quantity')\n-                                    ->label('Qty Out')\n-                                    ->default(0)\n-                                    ->numeric()\n-                                    ->required()\n-                                    ->minValue(0)\n-                                    ->live(onBlur: true)\n-                                    ->afterStateUpdated(function ($state, Get $get, Set $set) {\n-                                        $stbefore = $get('stock_before');\n-                                        $value = $state - $stbefore;\n-                                        if ($value < $stbefore) {\n-                                            $set('stock_after', $stbefore - $state);\n-                                        } else {\n-                                            $set('stock_after', $stbefore + $state);\n-                                        }\n-                                    })\n-                                    ->afterStateHydrated(fn($state, Set $set, Get $get) => $set('p_total_amount', $state * $get('p_unit_amount')))\n-                                    ->columnSpan(['sm' => 4, 'md' => 4, 'lg' => 4, 'xl' => 4]),\n-\n-                                TextInput::make('p_unit_amount')\n-                                    ->label('Amount Out')\n-                                    ->readOnly()\n-                                    ->required()\n-                                    ->dehydrated()\n-                                    ->numeric()\n-                                    ->live(onBlur: true)\n-                                    ->afterStateUpdated(fn($state, Set $set, Get $get) => $set('p_total_amount', $state * $get('quantity')))\n-                                    ->columnSpan(['sm' => 4, 'md' => 4, 'lg' => 4, 'xl' => 4]),\n-\n-                                TextInput::make('p_total_amount')\n-                                    ->label('T.Amount Out')\n-                                    ->required()\n-                                    ->readOnly()\n-                                    ->numeric()\n-                                    ->placeholder(function (Set $set, Get $get) {\n-                                        $stbefore = $get('stock_before');\n-                                        $stafter = $get('stock_after');\n-                                        $value = $stafter - $stbefore;\n-                                        if ($value < 0) {\n-                                            $set('p_total_amount', $value * -1 * $get('p_unit_amount'));\n-                                        } else {\n-                                            $set('p_total_amount', 0);\n-                                        }\n-                                    })\n-                                    ->columnSpan(['sm' => 4, 'md' => 4, 'lg' => 4, 'xl' => 4]),\n-\n-                                TextInput::make('notes')\n-                                    ->label('Description')\n-                                    ->columnSpan(['sm' => 12, 'md' => 12, 'lg' => 12, 'xl' => 12]),\n-\n-                                Hidden::make('mutation_type')\n-                                    ->default('Production'),\n-\n-                            ])\n-                            ->columns(['sm' => 12, 'md' => 12, 'lg' => 12, 'xl' => 12])\n-                            ->extraItemActions([\n-                                Action::make('openProduct')\n-                                    ->tooltip('Open product')\n-                                    ->icon('heroicon-m-arrow-top-right-on-square')\n-                                    ->url(function (array $arguments, Repeater $component): ?string {\n-                                        $itemData = $component->getRawItemState($arguments['item']);\n-\n-                                        $product = Product::find($itemData['product_id']);\n-\n-                                        if (! $product) {\n-                                            return null;\n-                                        }\n-\n-                                        return ProductResource::getUrl('edit', ['record' => $product]);\n-                                    }, shouldOpenInNewTab: true)\n-                                    ->hidden(fn(array $arguments, Repeater $component): bool => blank($component->getRawItemState($arguments['item'])['product_id'])),\n-                            ]),\n-\n-                        Group::make()->schema([\n-\n-                            Placeholder::make('grand_total_placeholder')\n-                                ->label('Grand Total')\n-                                ->content(function (Get $get, Set $set) {\n-\n-                                    $total = 0;\n-                                    if (!$repeaters = $get('items')) {\n-                                        return $total;\n-                                    }\n-                                    foreach ($repeaters as $key => $repeater) {\n-                                        $total += $get(\"items.{$key}.p_total_amount\");\n-                                    }\n-\n-                                    $grandTotal = $total;\n-                                    $set('grand_total', $grandTotal);\n-                                    return Number::currency($grandTotal, 'IDR');\n-                                }),\n-\n-                            Hidden::make('grand_total')\n-                                ->default(0)\n-\n-                        ])->columns(['sm' => 3, 'md' => 3, 'lg' => 3, 'xl' => 3])\n-                    ])\n+                    \n                 ])->columnSpanFull()\n             ]);\n     }\n \n"
                },
                {
                    "date": 1734019912774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,27 +71,8 @@\n                             ->default('PRO' . date('YmdHis') . '-' . Auth::user()->id) ## Jika ingin menggunakan OrderID otomatis\n                             ->readOnly()\n                             ->columnSpan(4),\n \n-                        Select::make('from_branch_id')\n-                            ->label('From')\n-                            ->disabled()\n-                            ->dehydrated()\n-                            ->relationship('branch', 'name')\n-                            ->default(Auth::user()->branch_id)\n-                            ->searchable()\n-                            ->preload()\n-                            ->required()\n-                            ->columnSpan(4),\n-\n-                        Select::make('to_branch_id')\n-                            ->label('To')\n-                            ->relationship('branch', 'name')\n-                            ->searchable()\n-                            ->preload()\n-                            ->required()\n-                            ->columnSpan(4),\n-\n                         DateTimePicker::make('date_order')\n                             ->label('Date Tr.')\n                             ->default(now())\n                             ->required()\n@@ -139,9 +120,164 @@\n                             ->autosize()\n                             ->columnSpan(6)\n                     ])->columns(['sm' => 12, 'md' => 12, 'lg' => 12, 'xl' => 12]),\n \n+                    Section::make('Pro. Items')->schema([\n+                        Repeater::make('items')\n+                            ->relationship()\n+                            ->reorderable()\n+                            ->schema([\n \n+                                Select::make('product_id')\n+                                    ->relationship(\n+                                        name: 'product',\n+                                        modifyQueryUsing: fn(Builder $query) => $query->orderBy('name')->orderBy('variant')->where('branch_id', Auth::user()->branch_id),\n+                                    )\n+                                    ->getOptionLabelFromRecordUsing(fn(Model $record) => \"{$record->name} {$record->variant}\")\n+                                    ->searchable(['name', 'variant'])\n+                                    ->preload()\n+                                    ->required()\n+                                    ->live()\n+                                    ->distinct()\n+                                    ->disableOptionsWhenSelectedInSiblingRepeaterItems()\n+                                    ->reactive()\n+                                    ->afterStateUpdated(fn($state, Set $set) => $set('p_unit_amount', Product::find($state)?->cogs ?? 0))\n+                                    ->afterStateUpdated(fn($state, Set $set, Get $get) => $set('p_total_amount', Product::find($state)?->cogs * $get('quantity') ?? 0))\n+\n+                                    ->afterStateUpdated(function (Get $get, Set $set) {\n+                                        $boughtqty = OrderItem::query()->where('product_id', $get('product_id'))->sum('p_quantity');\n+                                        $soldqty = OrderItem::query()->where('product_id', $get('product_id'))->sum('quantity');\n+                                        $set('stock_before', $boughtqty - $soldqty);\n+                                    })\n+                                    ->afterStateUpdated(function (Get $get, Set $set) {\n+                                        $boughtqty = OrderItem::query()->where('product_id', $get('product_id'))->sum('p_quantity');\n+                                        $soldqty = OrderItem::query()->where('product_id', $get('product_id'))->sum('quantity');\n+                                        $set('stock_after', $boughtqty - $soldqty - $get('quantity'));\n+                                    })\n+\n+\n+                                    ->columnSpan(['sm' => 5, 'md' => 5, 'lg' => 5, 'xl' => 5]),\n+\n+                                TextInput::make('stock_before')\n+                                    ->label('Stock Before')\n+                                    ->disabled()\n+                                    ->dehydrated()\n+                                    ->columnSpan(['sm' => 2, 'md' => 2, 'lg' => 2, 'xl' => 2]),\n+\n+                                TextInput::make('stock_after')\n+                                    ->label('Stock After')\n+                                    ->disabled()\n+                                    ->dehydrated()\n+                                    ->columnSpan(['sm' => 2, 'md' => 2, 'lg' => 2, 'xl' => 2]),\n+\n+                                Select::make('branch_id')\n+                                    ->default(fn() => Auth::user()->branch_id)\n+                                    ->relationship(\n+                                        name: 'branch',\n+                                        modifyQueryUsing: fn(Builder $query) => $query->orderBy('name')->where('is_active', 1),\n+                                    )\n+                                    ->getOptionLabelFromRecordUsing(fn(Model $record) => \"{$record->name}\")\n+                                    ->disabled()\n+                                    ->dehydrated()\n+                                    ->columnSpan(['sm' => 3, 'md' => 3, 'lg' => 3, 'xl' => 3]),\n+\n+                                TextInput::make('quantity')\n+                                    ->label('Qty Out')\n+                                    ->default(0)\n+                                    ->numeric()\n+                                    ->required()\n+                                    ->minValue(0)\n+                                    ->live(onBlur: true)\n+                                    ->afterStateUpdated(function ($state, Get $get, Set $set) {\n+                                        $stbefore = $get('stock_before');\n+                                        $value = $state - $stbefore;\n+                                        if ($value < $stbefore) {\n+                                            $set('stock_after', $stbefore - $state);\n+                                        } else {\n+                                            $set('stock_after', $stbefore + $state);\n+                                        }\n+                                    })\n+                                    ->afterStateHydrated(fn($state, Set $set, Get $get) => $set('p_total_amount', $state * $get('p_unit_amount')))\n+                                    ->columnSpan(['sm' => 4, 'md' => 4, 'lg' => 4, 'xl' => 4]),\n+\n+                                TextInput::make('p_unit_amount')\n+                                    ->label('Amount Out')\n+                                    ->readOnly()\n+                                    ->required()\n+                                    ->dehydrated()\n+                                    ->numeric()\n+                                    ->live(onBlur: true)\n+                                    ->afterStateUpdated(fn($state, Set $set, Get $get) => $set('p_total_amount', $state * $get('quantity')))\n+                                    ->columnSpan(['sm' => 4, 'md' => 4, 'lg' => 4, 'xl' => 4]),\n+\n+                                TextInput::make('p_total_amount')\n+                                    ->label('T.Amount Out')\n+                                    ->required()\n+                                    ->readOnly()\n+                                    ->numeric()\n+                                    ->placeholder(function (Set $set, Get $get) {\n+                                        $stbefore = $get('stock_before');\n+                                        $stafter = $get('stock_after');\n+                                        $value = $stafter - $stbefore;\n+                                        if ($value < 0) {\n+                                            $set('p_total_amount', $value * -1 * $get('p_unit_amount'));\n+                                        } else {\n+                                            $set('p_total_amount', 0);\n+                                        }\n+                                    })\n+                                    ->columnSpan(['sm' => 4, 'md' => 4, 'lg' => 4, 'xl' => 4]),\n+\n+                                TextInput::make('notes')\n+                                    ->label('Description')\n+                                    ->columnSpan(['sm' => 12, 'md' => 12, 'lg' => 12, 'xl' => 12]),\n+\n+                                Hidden::make('mutation_type')\n+                                    ->default('Production'),\n+\n+                            ])\n+                            ->columns(['sm' => 12, 'md' => 12, 'lg' => 12, 'xl' => 12])\n+                            ->extraItemActions([\n+                                Action::make('openProduct')\n+                                    ->tooltip('Open product')\n+                                    ->icon('heroicon-m-arrow-top-right-on-square')\n+                                    ->url(function (array $arguments, Repeater $component): ?string {\n+                                        $itemData = $component->getRawItemState($arguments['item']);\n+\n+                                        $product = Product::find($itemData['product_id']);\n+\n+                                        if (! $product) {\n+                                            return null;\n+                                        }\n+\n+                                        return ProductResource::getUrl('edit', ['record' => $product]);\n+                                    }, shouldOpenInNewTab: true)\n+                                    ->hidden(fn(array $arguments, Repeater $component): bool => blank($component->getRawItemState($arguments['item'])['product_id'])),\n+                            ]),\n+\n+                        Group::make()->schema([\n+\n+                            Placeholder::make('grand_total_placeholder')\n+                                ->label('Grand Total')\n+                                ->content(function (Get $get, Set $set) {\n+\n+                                    $total = 0;\n+                                    if (!$repeaters = $get('items')) {\n+                                        return $total;\n+                                    }\n+                                    foreach ($repeaters as $key => $repeater) {\n+                                        $total += $get(\"items.{$key}.p_total_amount\");\n+                                    }\n+\n+                                    $grandTotal = $total;\n+                                    $set('grand_total', $grandTotal);\n+                                    return Number::currency($grandTotal, 'IDR');\n+                                }),\n+\n+                            Hidden::make('grand_total')\n+                                ->default(0)\n+\n+                        ])->columns(['sm' => 3, 'md' => 3, 'lg' => 3, 'xl' => 3])\n+                    ])\n                 ])->columnSpanFull()\n             ]);\n     }\n \n"
                },
                {
                    "date": 1734020022402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,14 +107,16 @@\n                             ])\n                             ->colors([\n                                 'new' => 'info',\n                                 'transfering' => 'warning',\n-                                'done' => 'success'\n+                                'done' => 'success',\n+                                'canceled' => 'danger'\n                             ])\n                             ->icons([\n                                 'new' => 'heroicon-m-sparkles',\n                                 'transfering' => 'heroicon-m-arrow-path',\n-                                'done' => 'heroicon-m-check-badge'\n+                                'done' => 'heroicon-m-check-badge',\n+                                'canceled' => 'heroicon-m-x-circle'\n                             ]),\n \n                         Textarea::make('notes')\n                             ->autosize()\n"
                }
            ],
            "date": 1734018922630,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Filament\\Resources;\n\nuse App\\Models\\Production;\nuse App\\Filament\\Resources\\TrStkOutResource\\Pages;\nuse App\\Filament\\Resources\\TrStkOutResource\\RelationManagers;\nuse App\\Models\\Branch;\nuse App\\Models\\OrderItem;\nuse App\\Models\\Product;\nuse App\\Models\\TrStkOut;\nuse App\\Models\\User;\nuse Filament\\Forms;\nuse Filament\\Forms\\Components\\Actions\\Action;\nuse Filament\\Forms\\Components\\DateTimePicker;\nuse Filament\\Forms\\Components\\Group;\nuse Filament\\Forms\\Components\\Hidden;\nuse Filament\\Forms\\Components\\Placeholder;\nuse Filament\\Forms\\Components\\Repeater;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Textarea;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Forms\\Components\\ToggleButtons;\nuse Filament\\Forms\\Form;\nuse Filament\\Forms\\Get;\nuse Filament\\Forms\\Set;\nuse Filament\\Resources\\Resource;\nuse Filament\\Tables;\nuse Filament\\Tables\\Actions\\DeleteBulkAction;\nuse Filament\\Tables\\Columns\\SelectColumn;\nuse Filament\\Tables\\Columns\\Summarizers\\Sum;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Tables\\Table;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Database\\Eloquent\\Collection;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\SoftDeletingScope;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Number;\n\nclass ProductionResource extends Resource\n{\n    protected static ?string $model = Production::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    public static function form(Form $form): Form\n    {\n        return $form\n            ->schema([\n                //\n            ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->columns([\n                //\n            ])\n            ->filters([\n                //\n            ])\n            ->actions([\n                Tables\\Actions\\ViewAction::make(),\n                Tables\\Actions\\EditAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ]);\n    }\n\n    public static function getRelations(): array\n    {\n        return [\n            //\n        ];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListProductions::route('/'),\n            'create' => Pages\\CreateProduction::route('/create'),\n            'view' => Pages\\ViewProduction::route('/{record}'),\n            'edit' => Pages\\EditProduction::route('/{record}/edit'),\n        ];\n    }\n}\n"
        }
    ]
}